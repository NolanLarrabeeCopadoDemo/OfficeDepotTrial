<apex:page controller="seismic.SeismicAdminController" action="{!init}">
    <apex:stylesheet value="{!URLFOR($Resource.seismic__SeismicAdmin)}"/>
    
    <script type="text/javascript">
        __sfdcSessionId = "{!$API.Session_ID}";
    </script>
    <script type="text/javascript" src="/soap/ajax/27.0/connection.js"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.SFConnectionPatch)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.json2)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.jquery_base64_js)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.SalesforceMetadata)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.SeismicAdminSetting)}"></script>
    <script type="text/javascript" src="{!URLFOR($Resource.SeismicFilterDialog)}"></script>
    <apex:includeScript value="{!URLFOR($Resource.seismic__jszip, '/jszip.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.seismic__jszip, '/jszip-load.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.seismic__jszip, '/jszip-deflate.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.seismic__jszip, '/jszip-inflate.js')}"/>   
    <apex:includeScript value="{!URLFOR($Resource.seismic__jquery_1_11_3_min_js)}" />
    <script>
    	jQuery.noConflict();
    	
    	function disableAllButtons() {
            var allBtns = [].slice.apply(document.getElementsByClassName("btn"));
        
            for (var i = 0; i < allBtns.length; i++) {
                var btn = allBtns[i];
                if (btn) {
                    btn.className = 'btnDisabled';
                    btn.disabled = 'disabled';
                }
            }
        }
        
        function enableAllButtons() {
            var allBtns = [].slice.apply(document.getElementsByClassName("btnDisabled"));
        
            for (var i = 0; i < allBtns.length; i++) {
                var btn = allBtns[i];
                if (btn) {
                    btn.className = 'btn';
                    btn.removeAttribute('disabled');
                }
            }
        }
        
        function showError(msg) {
            showGlobalMessage('error', msg);
        }
        
        function checkCanDelete(objectDisplayName, buttonName, buttonApiName, objectTypeMappingInstanceName, visualforcePageId) {
            
            var msg = '';
            if(buttonName && objectDisplayName) {
                msg = 'Are you sure you want to delete this: ' + buttonName + '(' + objectDisplayName + ')?';
            } else {
                msg = 'Are you sure you want to delete this?';
            }
            
            if (window.confirm(msg)) {
                if(visualforcePageId) {
                    deleteVisualforcePage(visualforcePageId, function(){
                        _delete();
                    });
                } else {
                    _delete();
                }
            }
            
            function _delete() {
                sforce.connection.query("SELECT ID from WebLink WHERE WebLink.Name = '" + buttonApiName.replace("'", "\\'") + "'", {
                    onSuccess : function(result){
                        if(result.getArray("records").length == 0){                         
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.SeismicAdminController.deleteObjectTypeMapping}',
                                objectTypeMappingInstanceName, 
                                function(result){
                                    if(!result) {
                                        window.location.href = window.location.href;
                                        return;
                                    }
                                    
                                    if(typeof result == 'string'){
                                        showError(result);
                                    } else if(result.statusCode != 200) {
                                        showError(result.message);
                                    }
                                }
                            );
                        } else {
                            var idToDel = result.getArray("records")[0].Id;
                            sforce.connection.deleteIds([result.getArray("records")[0].Id], {
                                onSuccess : function(result){
                                    if(result && result[0] && result[0].success == 'true') {
                                        Visualforce.remoting.Manager.invokeAction(
                                            '{!$RemoteAction.SeismicAdminController.deleteObjectTypeMapping}',
                                            objectTypeMappingInstanceName, 
                                            function(result){
                                                if(!result) {
                                                    window.location.href = window.location.href;
                                                    return;
                                                }
                                                
                                                if(typeof result == 'string'){
                                                    showError(result);
                                                } else if(result.statusCode != 200) {
                                                    showError(result.message);
                                                }
                                            }
                                        );
                                    } else if(result[0] && result[0].errors && result[0].errors.message){
                                        var msg = result[0].errors.message;
                                        if(msg.indexOf('Please delete the reference before deleting the button or link') > -1) {
                                            msg += '<a target="_blank" href="https://login.salesforce.com/_ui/common/config/link/WeblinkImpactAnalysis/d?id=' + idToDel.substr(0, 15) + '&delete=1">Click to see where this button is used</a>';
                                        }
                                        
                                        showError("Failed to delete Custom Button. " + msg);
                                    }
                                }, 
                                onFailure : function(error){
                                    showError("Failed to delete Custom Button: " + error.message);
                                }
                            });
                        }
                    }, 
                    onFailure : function(error){
                        showError("Failed to delete Custom Button: " + error.message);
                    }
                });
            }
        }
        function getAllObjects(){
			var allObjectsResult = sforce.connection.describeGlobal();
			var allLayoutableObjects = [];
			var sobjects = allObjectsResult.getArray("sobjects");
			for (var i=0; i<sobjects.length; i++) { 
				if(sobjects[i].layoutable == "false" || sobjects[i].customSetting == "true")continue;
				if(sobjects[i].name == 'Note' || sobjects[i].name == 'Idea' || sobjects[i].name == 'OpportunityContactRole' )continue;
				var eachObject = {};
				eachObject.name = sobjects[i].name;
				eachObject.label = sobjects[i].label;
				allLayoutableObjects.push(JSON.stringify(eachObject));
			}
			allLayoutableObjects = '[' + allLayoutableObjects + ']';
			return allLayoutableObjects;
		}
    </script>
    <apex:sectionHeader title="Seismic Admin" rendered="{!isListView}" />
    <apex:pageMessages id="messages" rendered="{!isListView}" escape="false" />
    
    <apex:form id="completeUpgrade" rendered="{!isListView}">
        <apex:pageBlock id="packageUpgrade" title="To Complete Upgrade" rendered="{!needCompleteUpgrade}">
            <apex:pageBlockSection columns="1">
                <span style="font-weight: bold;">!Important: </span>
                Because this new Seismic Application version contains some neccessary change, you have to complete upgrade to apply these updates.
            </apex:pageBlockSection>
            <apex:pageBlockButtons id="toCompleteUpgradeButton" location="bottom">
                <apex:commandButton value="Complete Upgrade" action="{!toCompleteUpgrade}" />
            </apex:pageBlockButtons>
        </apex:pageBlock>
    </apex:form>
    
	<apex:tabPanel switchType="client" value="{!tabInFocus}" rendered="{!isListView}" id="tabPanel" tabClass="activeTab" inactiveTabClass="inactiveTab">
		<apex:tab label="Global Setting" name="global" id="globalSetting">
			<apex:form id="subscription" rendered="{!isListView}">
		        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true">
		            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
		            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
		        </apex:actionFunction>

		        <apex:pageBlock title="Subscription Setting" id="subscriptionSetting" rendered="{!adminSettingAccessable}">
		            <apex:pageBlockButtons location="top" id="subscriptionSettingButtons">
		                <apex:commandButton value="Check & Save" rendered="{!adminSettingManagable}" disabled="{!checkingSubscription}" onclick="this.disabled='disabled';this.className='btnDisabled'" action="{!saveAndValidateSubscription}" rerender="subscriptionSetting, messages, checkSubscriptionBlock"/>
		            </apex:pageBlockButtons>
		            
		            <apex:pageBlockSection columns="1">
		                <apex:inputText id="subscriptionInput" label="Subscription" value="{!seismicAdminSettings.seismic__Subscription__c}" onkeypress="if(event.keyCode==13){saveAndValidateSubscription();return false;}" disabled="{!NOT(adminSettingManagable)}">
		                    <apex:actionFunction name="saveAndValidateSubscription" action="{!saveAndValidateSubscription}" rerender="subscriptionSetting, messages, checkSubscriptionBlock" />
		                </apex:inputText>
		                
		                <apex:inputCheckbox id="disableSingleSignOnAutoRedirection" label="Disable SSO Auto Redirection" value="{!seismicAdminSettings.seismic__DisableSingleSignOnAutoRedirection__c}" disabled="{!NOT(adminSettingManagable)}" title="When SSO enabled on Seismic, don't automactically redirect to SSO if this has been checked.">
		                </apex:inputCheckbox>
		                
		                <apex:inputCheckbox id="enableCartContext" label="Enable Cart Context" value="{!seismicAdminSettings.seismic__EnableCartContext__c}" disabled="{!NOT(adminSettingManagable)}" title="Checked to show up Salesforce object related content in cart">
		                </apex:inputCheckbox>
		                
		                <apex:inputCheckbox id="DisableRememberMe" label="Disable Remember Me" value="{!seismicAdminSettings.seismic__DisableRememberMe__c}" disabled="{!NOT(adminSettingManagable)}" title="Checked to Disable Remember Me Login">
		                </apex:inputCheckbox>
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		        
		        <div style="display: none;">
		            <apex:pageBlock id="checkSubscriptionBlock">
		                <apex:pageBlockSection rendered="{!checkingSubscription && adminSettingManagable}">
		                    <apex:actionFunction name="saveSubscription" action="{!saveSubscription}" rerender="messages, subscriptionSetting">
		                        <apex:param name="subscription" assignTo="{!subscription}" value=""/>
		                        <apex:param name="tenant" assignTo="{!tenant}" value=""/>
		                        <apex:param name="serverBaseUrl" assignTo="{!serverBaseUrl}" value=""/>
		                        <apex:param name="disableSingleSignOnAutoRedirection" assignTo="{!disableSingleSignOnAutoRedirection}" value=""/>
		                        <apex:param name="enableCartContext" assignTo="{!enableCartContext}" value=""/>
		                        <apex:param name="disableRememberMe" assignTo="{!disableRememberMe}" value=""/>
		                    </apex:actionFunction>
		                    <apex:actionFunction name="showErrorMessage" action="{!showErrorMessage}" rerender="messages, subscriptionSetting">
		                        <apex:param name="errorMessage" assignTo="{!errorMessage}" value=""/>
		                    </apex:actionFunction>
		                    <c:CheckSubscription devTenant="{!devTenant}" disableSSOAutoRedirection="{!seismicAdminSettings.seismic__DisableSingleSignOnAutoRedirection__c}" enableCartContext="{!seismicAdminSettings.seismic__EnableCartContext__c}" disableRememberMe="{!seismicAdminSettings.seismic__DisableRememberMe__c}">{!seismicAdminSettings.seismic__Subscription__c}</c:CheckSubscription>
		                </apex:pageBlockSection>
		            </apex:pageBlock>
		        </div>
		    </apex:form>
		</apex:tab>
		<apex:tab label="Legacy Components" name="old" id="oldSetting">
			<apex:form id="mappings" rendered="{!isListView}">
		        <!-- adds a page message (messageToShow) at various severties (messageTypeToShow) -->
		        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true">
		            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
		            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
		        </apex:actionFunction> 

		        <apex:pageBlock title="Subscription Setting For Classic" id="legacySubscriptionSetting" rendered="{!adminSettingAccessable}">
		            <apex:pageBlockButtons location="top" id="subscriptionSettingButtons">
		                <apex:commandButton value="Save" rendered="{!adminSettingManagable}" disabled="{!checkingSubscription}" action="{!saveLegacySubscription}" rerender="legacySubscriptionSetting, messages"/>
		            </apex:pageBlockButtons>
		            <apex:pageBlockSection columns="1">
		                <apex:inputCheckbox id="openPredictiveContentInNewWindow" label="Open Predictive Content in New Window" value="{!seismicAdminSettings.seismic__OpenPredictiveContentInNewWindow__c}" disabled="{!NOT(adminSettingManagable)}" title="Checked to open Prediective Content detail page in new web browser window(tab)"></apex:inputCheckbox>
		                <apex:inputCheckbox id="enableUniversalContentDetailPage" label="Enable Universal Content Detail Page" value="{!seismicAdminSettings.seismic__EnableUniversalContentDetailPage__c}" disabled="{!NOT(adminSettingManagable)}" title="Checked to use Prediective Content detail page to instead of open content within Folder/Tab page"></apex:inputCheckbox>
		            </apex:pageBlockSection>
		        </apex:pageBlock>

		        <apex:outputPanel >
		            <script>
		                function createdVisualforcePage(visualforcePage, SObject) {
		                    showMessage('info', 'Generate Visualforce page successfully. Click <a target="_blank" href="/09D/e?type=' + SObject + '&setupid=' + SObject + 'Links&PageOrSobjectType=' + SObject + '&retURL=">here</a> to create Action.');
		                }
		            </script>
		
		            <apex:actionFunction name="generatePublisherActionComplete" action="{!saveVisualforcePage}" rerender="messages, mappings, subscription" onbeforedomupdate="createdVisualforcePage(visualforcePage, SObject)">
		                <apex:param name="visualforcePage" assignTo="{!visualforcePage}" value=""/>
		                <apex:param name="objectTypeMappingInstanceNameName" assignTo="{!objectTypeMappingInstanceNameName}" value=""/>
		                <apex:param name="SObject" value=""/>
		            </apex:actionFunction>
		
		            <apex:actionFunction name="showMessage" action="{!showMessage}" rerender="messages" immediate="true">
		                <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
		                <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
		            </apex:actionFunction>
		
		            <c:GeneratePublisherAction oncomplete="generatePublisherActionComplete(visualforcePage, objectTypeMappingInstanceNameName, SObject);" oninfo="showMessage('info', infoMessage)"
		                onerror="showMessage('error', errorMessage)" isEditObjectDocMapping="{!isEditObjectDocMapping}"  canvasAppDeveloperName="{!CANVAS_APP_DEVELOPER_NAME}" packageNameSpace="{!PACKAGE_NAMESPACE}"></c:GeneratePublisherAction>
		        </apex:outputPanel>
		        
		        <apex:inputHidden id="allLayoutableObjectsHidden" value="{!allLayoutableObjectTypesString}"/>
		       	<script>
					document.getElementById("{!$Component.allLayoutableObjectsHidden}").value = getAllObjects();
		       	</script>  
		        	
		        <apex:pageBlock title="System Defined Predictive" >
		            <apex:pageBlockButtons location="top">
		                <apex:commandButton value="New" action="{!AddSystemDefinedPredictiveMapping}"/>
		            </apex:pageBlockButtons>
		
		            <apex:variable value="{!0}" var="index" />
		            
		            <!-- table of existing mappings -->
		            <apex:pageBlockTable value="{!systemDefinedPredictiveMappings}" var="mapping" rendered="{! NOT(systemDefinedPredictiveMappings.empty) }" id="systemDefinedPredictiveMappingsTable">
		                <apex:variable value="" var="objectDisplayName" />
		                <apex:variable value="" var="pageName" />
		                <apex:variable value="  " var="emptyContent" />
		
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}" styleClass="actionColumn">                    
		                    <apex:variable value="{!IF(NOT(ISBLANK(mapping.seismic__Object_Label__c)), mapping.seismic__Object_Label__c, mapping.seismic__Object_Name__c)}" var="objectDisplayName" />
		                    <apex:variable value="{!IF(ISBLANK(mapping.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, mapping.seismic__Button_Name__c )}" var="pageName" />
		                    <apex:variable value="{!index+1}" var="index" />
		
		                    <apex:facet name="header">Action</apex:facet>
		
		                    <apex:commandLink action="{!EditSystemDefinedPredictiveMapping}" title="Edit - Record {!FLOOR(index)} - {!pageName}({!objectDisplayName})" rendered="{!objectTypeMappingUpdatable}">
		                        <apex:param name="objectTypeMappingInstanceNameName" value="{!mapping.Name}" assignTo="{!objectTypeMappingInstanceNameName}"/>
		                        Edit
		                    </apex:commandLink>
		                    |
		                    <apex:commandLink title="Delete - Record {!FLOOR(index)} - {!pageName}({!objectDisplayName})" onclick="checkCanDelete('{!JSINHTMLENCODE(objectDisplayName)}', '{!JSINHTMLENCODE(pageName)}', '{!JSINHTMLENCODE(mapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(mapping.Name)}', '{!JSINHTMLENCODE(pageName)}'); return false;" rendered="{!objectTypeMappingDeleteable}">
		                        Del
		                    </apex:commandLink>
		                </apex:column>
		
		                <apex:column value="{!objectDisplayName}" styleClass="dataCell" width="200">
		                    <apex:facet name="header">Related Object</apex:facet>
		                </apex:column>
		                
		                <apex:column value="{!pageName}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Predictive Component Name</apex:facet>
		                </apex:column>
		                
		                <apex:column value="{!mapping.seismic__Team_Site__c}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Predictive Content Setting Title</apex:facet>
		                </apex:column>
		                
		                <!-- 
		                <apex:column value="{!mapping.VisualforceParameter__c}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Visualforce Parameter</apex:facet>
		                </apex:column>
		                 -->
		            </apex:pageBlockTable>
		
		            <apex:pageBlockSection rendered="{!systemDefinedPredictiveMappings.empty}" columns="1">
		                No records to display
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		                
		        <apex:pageBlock title="Predictive Content" >
		            <apex:pageBlockButtons location="top">
		                <apex:commandButton value="New" action="{!AddVisualforcePageMapping}"/>
		            </apex:pageBlockButtons>
		
		            <apex:variable value="{!0}" var="index" />
		            
		            <!-- table of existing mappings -->
		            <apex:pageBlockTable value="{!vfPageMappings}" var="mapping" rendered="{! NOT(vfPageMappings.empty) }" id="vfPageMappingsTable">
		                <apex:variable value="" var="objectDisplayName" />
		                <apex:variable value="" var="pageName" />
		                <apex:variable value="  " var="emptyContent" />
		
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}" styleClass="actionColumn">                    
		                    <apex:variable value="{!IF(NOT(ISBLANK(mapping.seismic__Object_Label__c)), mapping.seismic__Object_Label__c, mapping.seismic__Object_Name__c)}" var="objectDisplayName" />
		                    <apex:variable value="{!IF(ISBLANK(mapping.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, mapping.seismic__Button_Name__c )}" var="pageName" />
		                    <apex:variable value="{!index+1}" var="index" />
		
		                    <apex:facet name="header">Action</apex:facet>
		
		                    <apex:commandLink action="{!EditVisualforcePageMapping}" title="Edit - Record {!FLOOR(index)} - {!pageName}({!objectDisplayName})" rendered="{!objectTypeMappingUpdatable}">
		                        <apex:param name="objectTypeMappingInstanceNameName" value="{!mapping.Name}" assignTo="{!objectTypeMappingInstanceNameName}"/>
		                        Edit
		                    </apex:commandLink>
		                    |
		                    <apex:commandLink title="Delete - Record {!FLOOR(index)} - {!pageName}({!objectDisplayName})" onclick="checkCanDelete('{!JSINHTMLENCODE(objectDisplayName)}', '{!JSINHTMLENCODE(pageName)}', '{!JSINHTMLENCODE(mapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(mapping.Name)}', '{!JSINHTMLENCODE(pageName)}'); return false;" rendered="{!objectTypeMappingDeleteable}">
		                        Del
		                    </apex:commandLink>
		                </apex:column>
		
		                <apex:column value="{!pageName}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Name</apex:facet>
		                </apex:column>
		
		                <apex:column value="{!objectDisplayName}" styleClass="dataCell" width="200">
		                    <apex:facet name="header">Related Object</apex:facet>
		                </apex:column>
		
		                <apex:column value="{!mapping.seismic__Team_Site__c}" styleClass="dataCell" width="200" />
		
		                <apex:column value="{!mapping.seismic__Filter_List_Name__c}" styleClass="dataCell" width="200" />
		
		                <apex:column value="{!mapping.Id}" styleClass="dataCell js-filters-column" >
		                    <apex:facet name="header">Filters</apex:facet>
		                </apex:column>
		
		            </apex:pageBlockTable>
		
		            <apex:pageBlockSection rendered="{!vfPageMappings.empty}" columns="1">
		                No records to display
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		
		        <!-- Folder Button start -->  
		        <apex:pageBlock title="Folder Button" rendered="{!objectTypeMappingAccessable}">
		
		            <apex:pageBlockButtons location="top">
		                <apex:commandButton value="New" action="{!addObjectFolderMapping}" rendered="{!objectTypeMappingInsertable}"/>
		            </apex:pageBlockButtons>
		
		            <apex:variable value="{!1}" var="index" />
		
		            <apex:pageBlockTable value="{!objFolderMappings}" rendered="{!NOT(objFolderMappings.empty)}" var="otm" id="objTypeMappingsTable">
		                <apex:variable value="" var="objectDisplayName" />
		                <apex:variable value="" var="buttonName" />
		                <apex:variable value="  " var="emptyContent" />
		
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}" styleClass="actionColumn">                    
		                    <apex:variable value="{!IF(NOT(ISBLANK(otm.seismic__Object_Label__c)), otm.seismic__Object_Label__c, otm.seismic__Object_Name__c)}" var="objectDisplayName" />
		                    <apex:variable value="{!IF(ISBLANK(otm.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, otm.seismic__Button_Name__c )}" var="buttonName" />
		                    <apex:facet name="header">Action</apex:facet>
		
		                    <apex:commandLink action="{!editObjectFolderMapping}" title="Edit - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" rendered="{!objectTypeMappingUpdatable}">
		                        <apex:param name="objectTypeMappingInstanceNameName" value="{!otm.Name}" assignTo="{!objectTypeMappingInstanceNameName}"/>
		                        Edit
		                    </apex:commandLink>
		                    |
		                    <apex:commandLink title="Delete - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" onclick="checkCanDelete('{!JSINHTMLENCODE(objectDisplayName)}', '{!JSINHTMLENCODE(buttonName)}', '{!JSINHTMLENCODE(otm.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(otm.Name)}'); return false;" rendered="{!objectTypeMappingDeleteable}">
		                        Del
		                    </apex:commandLink>
		
		                    <apex:variable value="{!index+1}" var="index" />
		
		                </apex:column>
		
		                <apex:column value="{!buttonName}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Button Name</apex:facet>
		                </apex:column>
		
		                <apex:column value="{!objectDisplayName}" styleClass="dataCell" width="200">
		                    <apex:facet name="header">Related Object</apex:facet>
		                </apex:column>
		
		                <apex:column value="{!otm.seismic__Team_Site__c}" styleClass="dataCell" width="200" />
		
		                <apex:column value="{!otm.seismic__Filter_List_Name__c}" styleClass="dataCell" width="200" />
		
		                <apex:column value="{!otm.Id}" styleClass="dataCell js-filters-column" >
		                    <apex:facet name="header">Filters</apex:facet>
		                </apex:column>
		
		            </apex:pageBlockTable>
		            <apex:pageBlockSection rendered="{!objFolderMappings.empty}" columns="1">
		                No records to display
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		        
		        <script type="text/javascript">
		            jQuery(function(){
		                var filtersDatas = JSON.parse(jQuery.base64.decode("{!filtersDatas}"));
		                var filterLogics = JSON.parse(jQuery.base64.decode("{!filterLogics}"));
		                jQuery(".js-filters-column").each(function(){
		                    
		                    var id = jQuery(this).text();
		                    jQuery(this).empty();
		                    
		                    var filterData = filtersDatas[id];
		                    var filterLogic = filterLogics[id];
		                    if (!filterData || filterData.length == 0)
		                        return;
		                    
		                    var $tbody = jQuery('<tbody>').appendTo(
		                        jQuery('<table class="list">')
		                            .append(jQuery('<tbody>')
		                            .append(jQuery('<tr class=headerRow>')
		                                .append(
		                                    jQuery('<th class=headerRow>').html('Custom Property in Seismic'),
		                                    jQuery('<th class=headerRow>').html('Operator'),
		                                    jQuery('<th class=headerRow>').html('Field in Salesforce')
		                                )
		                            )
		                        ).appendTo(this));
		                    
		                    for(var i = 0; i < filterData.length; i ++) {
		                        var item = filterData[i];
		                        var seismicField = item[0],
		                            operator = item[1],
		                            sfFieldLabel = item[2];        
		                        
		                        $tbody.append(jQuery('<tr class="dataRow">').append(
		                            jQuery('<td class="seismicFieldColumn dataCell">').text(seismicField),
		                            jQuery('<td class="operatorColumn dataCell">').text(operator),
		                            jQuery('<td class="sfFieldLabelColumn dataCell">').text(sfFieldLabel)
		                        ));
		                    }
		                    
		                    var filterMatching = filterLogic == 'OR' ? 'Any' : 'All';
		                    jQuery('<div style="height: 20px; line-height: 20px;"></div>').text('Matching: ' + filterMatching).appendTo(this);
		                });
		            })
		        </script>
		        
		        <!-- Folder Button end --> 
		        
		        <!-- Document Button start -->
		        <apex:pageBlock title="Document Button" rendered="{!objectTypeMappingAccessable}">
		            <apex:pageBlockButtons location="top">
		                <apex:commandButton value="New" action="{!addObjectDocMapping}" rendered="{!objectTypeMappingInsertable}"/>
		            </apex:pageBlockButtons>
		            <apex:variable value="{!1}" var="index" />
		            <apex:pageBlockTable value="{!objDocMappings}" rendered="{!NOT(objDocMappings.empty)}" var="otm" id="objTypeMappingsTable">
		                <apex:variable value="" var="objectDisplayName" />
		                <apex:variable value="" var="buttonName" />
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}" styleClass="actionColumn">                    
		                    <apex:variable value="{!IF(NOT(ISBLANK(otm.seismic__Object_Label__c)), otm.seismic__Object_Label__c, otm.seismic__Object_Name__c)}" var="objectDisplayName" />
		                    <apex:variable value="{!IF(ISBLANK(otm.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, otm.seismic__Button_Name__c )}" var="buttonName" />
		                    <apex:facet name="header">Action</apex:facet>
		                    <apex:commandLink action="{!editObjectDocMapping}" title="Edit - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" rendered="{!objectTypeMappingUpdatable}">
		                        <apex:param name="objectTypeMappingInstanceNameName" value="{!otm.Name}" assignTo="{!objectTypeMappingInstanceNameName}"/>
		                        Edit
		                    </apex:commandLink>
		                    |
		                    <apex:commandLink title="Delete - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" onclick="checkCanDelete('{!JSINHTMLENCODE(objectDisplayName)}', '{!JSINHTMLENCODE(buttonName)}', '{!JSINHTMLENCODE(otm.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(otm.Name)}', '{!JSINHTMLENCODE(otm.seismic__Related_Visualforce_Page_Name__c)}'); return false;" rendered="{!objectTypeMappingDeleteable}">
		                        Del
		                    </apex:commandLink>
		                    <apex:variable value="{!index+1}" var="index" />
		                </apex:column>
		                <apex:column value="{!buttonName}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Button Name</apex:facet>
		                </apex:column>
		                <apex:column value="{!objectDisplayName}" styleClass="dataCell" width="200">
		                    <apex:facet name="header">Related Object</apex:facet>
		                </apex:column>
		                <apex:column value="{!otm.seismic__Team_Site__c}" styleClass="dataCell" width="200" />
		                <apex:column value="{!otm.seismic__Document_Name__c}" styleClass="dataCell" width="200" />
		                <apex:column value="{!otm.seismic__Generate_Format__c}" styleClass="dataCell" width="200">
		                	<apex:facet name="header">Default Format</apex:facet>
		                </apex:column>
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}">      
		                    <apex:facet name="header">Visualforce page for Action</apex:facet>
		                    <apex:outputpanel rendered="{!ISNULL(otm.seismic__Related_Visualforce_Page_Name__c)}">                    
		                        <a href="javascript: createVisualforcePage('{!JSINHTMLENCODE(otm.Button_Value__c)}', '{!JSINHTMLENCODE(otm.Button_Name__c)}', '{!JSINHTMLENCODE(otm.Object_Name__c)}', 'createVisualforcePageLink{!FLOOR(index)}', '{!JSINHTMLENCODE(otm.Name)}'); void(0);" 
		                            id="createVisualforcePageLink{!FLOOR(index)}">Create Visualforce page for Action</a> 
		                    </apex:outputpanel>
		                    <apex:outputpanel rendered="{!NOT(ISNULL(otm.seismic__Related_Visualforce_Page_Name__c))}">
		                        {!otm.seismic__Related_Visualforce_Page_Name__c}
		                    </apex:outputpanel>
		                </apex:column>
		                <apex:column />
		            </apex:pageBlockTable>
		            <apex:pageBlockSection rendered="{!objDocMappings.empty}" columns="1">
		                No records to display
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		        <!-- Document Button end -->
		        
		        <!-- custom tab mapping start -->          
		        <apex:pageBlock title="Custom Tab Mappings" rendered="{!customTabMappingAccessable}">
		            <apex:pageBlockButtons location="top">
		                <apex:commandButton value="New" action="{!addCustomTabMapping}" rendered="{!customTabMappingInsertable}"/>
		            </apex:pageBlockButtons>
		            <apex:variable value="{!1}" var="index" />
		            <apex:pageBlockTable value="{!customTabMappings}" rendered="{!NOT(customTabMappings.empty)}" var="ctm" id="customTabMappingsTable">
		                <apex:column rendered="{!customTabMappingUpdatable && customTabMappingDeleteable}" styleClass="actionColumn">
		                    <apex:facet name="header">Action</apex:facet>
		                    <apex:commandLink action="{!editCustomTabMapping}" title="Edit - Record {!FLOOR(index)} - {!ctm.seismic__Custom_Tab__c} - {!ctm.seismic__Team_Site__c}" rendered="{!customTabMappingUpdatable}">
		                        <apex:param name="customTabMappingInstanceNameName" value="{!ctm.Name}" assignTo="{!customTabMappingInstanceNameName}"/>
		                        Edit
		                    </apex:commandLink> 
		                    |
		                    <apex:commandLink action="{!deleteCustomTabMapping}" title="Delete - Record {!FLOOR(index)} - {!ctm.seismic__Custom_Tab__c} - {!ctm.seismic__Team_Site__c}" onclick="return window.confirm('Are you sure you want to delete this mapping ( {!JSINHTMLENCODE(ctm.seismic__Custom_Tab__c)} - {!JSINHTMLENCODE(ctm.seismic__Team_Site__c)} )?')" rendered="{!customTabMappingDeleteable}">
		                        <apex:param name="customTabMappingInstanceNameName" value="{!ctm.Name}" assignTo="{!customTabMappingInstanceNameName}"/>
		                        Del
		                    </apex:commandLink>
		                    <apex:variable value="{!index+1}" var="index" />
		                </apex:column>
		                <!-- 
		                <apex:column value="{!ctm.Custom_Tab_Id__c}" />
		                 -->
		                <apex:column value="{!ctm.seismic__Custom_Tab__c}" styleClass="dataCell" width="200" />
		                <apex:column value="{!ctm.seismic__Team_Site__c}" styleClass="dataCell" width="200" />
		                <apex:column value="{!ctm.seismic__Filter_List_Name__c}" styleClass="dataCell" width="200" />
		                <apex:column />
		            </apex:pageBlockTable>
		            <apex:pageBlockSection rendered="{!customTabMappings.empty}" columns="1">
		                No records to display 
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		        <!-- custom tab mapping end -->     
		    </apex:form>
		</apex:tab>
		<apex:tab label="New Components" name="new" id="newSetting">
			<apex:form id="newMappings" rendered="{!isListView}">
	        	<apex:inputHidden id="allLayoutableObjectsHidden" value="{!allLayoutableObjectTypesString}"/>
		       	<script>
					document.getElementById("{!$Component.allLayoutableObjectsHidden}").value = getAllObjects();
		       	</script>  
				<!-- New Predictive start -->
				<apex:pageBlock title="Embedded Applications For Classic">
					<apex:pageBlockButtons location="top">
						<apex:commandButton value="New" action="{!addNewPredictiveMapping}" />
					</apex:pageBlockButtons>
		
					<apex:variable value="{!0}" var="index" />
		
					<!-- table of existing mappings -->
					<apex:pageBlockTable value="{!newPredictiveMappings}" var="mapping" rendered="{! NOT(newPredictiveMappings.empty) }" id="newPredictiveMappingsTable">
						<apex:variable value="" var="objectDisplayName" />
						<apex:variable value="" var="pageName" />
						<apex:variable value="  " var="emptyContent" />
		
						<apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}"
							styleClass="actionColumn">
							<apex:variable value="{!IF(NOT(ISBLANK(mapping.seismic__Object_Label__c)), mapping.seismic__Object_Label__c, mapping.seismic__Object_Name__c)}"
								var="objectDisplayName" />
							<apex:variable value="{!IF(ISBLANK(mapping.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, mapping.seismic__Button_Name__c )}"
								var="pageName" />
							<apex:variable value="{!index+1}" var="index" />
		
							<apex:facet name="header">Action</apex:facet>
		
							<apex:commandLink action="{!editNewPredictiveMapping}"
								title="Edit - Record {!FLOOR(index)} - {!pageName}({!objectDisplayName})"
								rendered="{!objectTypeMappingUpdatable}">
								<apex:param name="objectTypeMappingInstanceNameName"
									value="{!mapping.Name}"
									assignTo="{!objectTypeMappingInstanceNameName}" />
		                        Edit
		                    </apex:commandLink>
		                    |
		                    <apex:commandLink title="Delete - Record {!FLOOR(index)} - {!pageName}({!objectDisplayName})" onclick="checkCanDelete('{!JSINHTMLENCODE(objectDisplayName)}', '{!JSINHTMLENCODE(pageName)}', '{!JSINHTMLENCODE(mapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(mapping.Name)}', '{!JSINHTMLENCODE(pageName)}'); return false;" rendered="{!objectTypeMappingDeleteable}">
		                        Del
		                    </apex:commandLink>
						</apex:column>
		
						<apex:column value="{!pageName}" styleClass="dataCell" width="200">
							<apex:facet name="header">Name</apex:facet>
						</apex:column>
		
						<apex:column value="{!objectDisplayName}" styleClass="dataCell"
							width="200">
							<apex:facet name="header">Related Object</apex:facet>
						</apex:column>
		
						<apex:column value="{!mapping.seismic__Embedded_Application__c}"
							styleClass="dataCell" width="200">
							<apex:facet name="header">Embedded Application</apex:facet>
						</apex:column>
		
						<apex:column value="{!mapping.seismic__Hide_Header__c}"
							styleClass="dataCell" width="200">
							<apex:facet name="header">Hide Application Header</apex:facet>
						</apex:column>
						
						<apex:column value="{!mapping.seismic__Open_Content_Inline__c}"
							styleClass="dataCell" width="200">
							<apex:facet name="header">Open Content Inline</apex:facet>
						</apex:column>
					</apex:pageBlockTable>
		
					<apex:pageBlockSection rendered="{!newPredictiveMappings.empty}"
						columns="1">
		                No records to display
		            </apex:pageBlockSection>
				</apex:pageBlock>
				<!-- New Predictive end -->
				<!-- Folder Button start -->  
		        <apex:pageBlock title="Tab Shortcut Buttons" rendered="{!objectTypeMappingAccessable}">
		
		            <apex:pageBlockButtons location="top">
		                <apex:commandButton value="New" action="{!addObjectFolderMappingLightning}" rendered="{!objectTypeMappingInsertable}"/>
		            </apex:pageBlockButtons>
		
		            <apex:variable value="{!1}" var="index" />
		
		            <apex:pageBlockTable value="{!objFolderMappingsLightning}" rendered="{!NOT(objFolderMappingsLightning.empty)}" var="otm" id="objTypeMappingsTableLightning">
		                <apex:variable value="" var="objectDisplayName" />
		                <apex:variable value="" var="buttonName" />
		                <apex:variable value="  " var="emptyContent" />
		
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}" styleClass="actionColumn">                    
		                    <apex:variable value="{!IF(NOT(ISBLANK(otm.seismic__Object_Label__c)), otm.seismic__Object_Label__c, otm.seismic__Object_Name__c)}" var="objectDisplayName" />
		                    <apex:variable value="{!IF(ISBLANK(otm.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, otm.seismic__Button_Name__c )}" var="buttonName" />
		                    <apex:facet name="header">Action</apex:facet>
		
		                    <apex:commandLink action="{!editObjectFolderMappingLightning}" title="Edit - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" rendered="{!objectTypeMappingUpdatable}">
		                        <apex:param name="objectTypeMappingInstanceNameName" value="{!otm.Name}" assignTo="{!objectTypeMappingInstanceNameName}"/>
		                        Edit
		                    </apex:commandLink>
		                    |
		                    <apex:commandLink title="Delete - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" onclick="checkCanDelete('{!JSINHTMLENCODE(objectDisplayName)}', '{!JSINHTMLENCODE(buttonName)}', '{!JSINHTMLENCODE(otm.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(otm.Name)}'); return false;" rendered="{!objectTypeMappingDeleteable}">
		                        Del
		                    </apex:commandLink>
		
		                    <apex:variable value="{!index+1}" var="index" />
		
		                </apex:column>
		
		                <apex:column value="{!buttonName}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Button Name</apex:facet>
		                </apex:column>
		
		                <apex:column value="{!objectDisplayName}" styleClass="dataCell" width="200">
		                    <apex:facet name="header">Related Object</apex:facet>
		                </apex:column>
		
		                <apex:column value="{!otm.seismic__Embedded_Application__c}" styleClass="dataCell" width="200">
		                	<apex:facet name="header">Embedded Application</apex:facet>
		                </apex:column>
		
		                <apex:column value="{!otm.seismic__Selected_Tab__c}" styleClass="dataCell" width="200">
		                	<apex:facet name="header">Selected Tab</apex:facet>
		                </apex:column>
		
		            </apex:pageBlockTable>
		            <apex:pageBlockSection rendered="{!objFolderMappingsLightning.empty}" columns="1">
		                No records to display
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		        <!-- Folder Button end -->
				
		        <!-- New Document Button start -->
		        <apex:pageBlock title="Document Button" rendered="{!objectTypeMappingAccessable}">
		            <apex:pageBlockButtons location="top">
		                <apex:commandButton value="New" action="{!addObjectNewDocMapping}" rendered="{!objectTypeMappingInsertable}"/>
		            </apex:pageBlockButtons>
		            <apex:variable value="{!1}" var="index" />
		            <apex:pageBlockTable value="{!objNewDocMappings}" rendered="{!NOT(objNewDocMappings.empty)}" var="otm" id="objTypeMappingsTable">
		                <apex:variable value="" var="objectDisplayName" />
		                <apex:variable value="" var="buttonName" />
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}" styleClass="actionColumn">                    
		                    <apex:variable value="{!IF(NOT(ISBLANK(otm.seismic__Object_Label__c)), otm.seismic__Object_Label__c, otm.seismic__Object_Name__c)}" var="objectDisplayName" />
		                    <apex:variable value="{!IF(ISBLANK(otm.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, otm.seismic__Button_Name__c )}" var="buttonName" />
		                    <apex:facet name="header">Action</apex:facet>
		                    <apex:commandLink action="{!editObjectNewDocMapping}" title="Edit - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" rendered="{!objectTypeMappingUpdatable}">
		                        <apex:param name="objectTypeMappingInstanceNameName" value="{!otm.Name}" assignTo="{!objectTypeMappingInstanceNameName}"/>
		                        Edit
		                    </apex:commandLink>
		                    |
		                    <apex:commandLink title="Delete - Record {!FLOOR(index)} - {!buttonName}({!objectDisplayName})" onclick="checkCanDelete('{!JSINHTMLENCODE(objectDisplayName)}', '{!JSINHTMLENCODE(buttonName)}', '{!JSINHTMLENCODE(otm.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(otm.Name)}', '{!JSINHTMLENCODE(otm.seismic__Related_Visualforce_Page_Name__c)}'); return false;" rendered="{!objectTypeMappingDeleteable}">
		                        Del
		                    </apex:commandLink>
		                    <apex:variable value="{!index+1}" var="index" />
		                </apex:column>
		                <apex:column value="{!buttonName}" styleClass="dataCell" width="200" >
		                    <apex:facet name="header">Button Name</apex:facet>
		                </apex:column>
		                <apex:column value="{!objectDisplayName}" styleClass="dataCell" width="200">
		                    <apex:facet name="header">Related Object</apex:facet>
		                </apex:column>
		                <apex:column value="{!otm.seismic__Team_Site__c}" styleClass="dataCell" width="200" />
		                <apex:column value="{!otm.seismic__Document_Name__c}" styleClass="dataCell" width="200" />
		                <!-- apex:column value="{!otm.seismic__Generate_Format__c}" styleClass="dataCell" width="200">
		                	<apex:facet name="header">Default Format</apex:facet>
		                </apex:column -->
		                <apex:column rendered="{!objectTypeMappingUpdatable && objectTypeMappingDeleteable}">      
		                    <apex:facet name="header">Visualforce page for Action</apex:facet>
		                    <apex:outputpanel rendered="{!ISNULL(otm.seismic__Related_Visualforce_Page_Name__c)}">                    
		                        <a href="javascript: createVisualforcePage('{!JSINHTMLENCODE(otm.Button_Value__c)}', '{!JSINHTMLENCODE(otm.Button_Name__c)}', '{!JSINHTMLENCODE(otm.Object_Name__c)}', 'createVisualforcePageLink{!FLOOR(index)}', '{!JSINHTMLENCODE(otm.Name)}'); void(0);" 
		                            id="createVisualforcePageLink{!FLOOR(index)}">Create Visualforce page for Action</a> 
		                    </apex:outputpanel>
		                    <apex:outputpanel rendered="{!NOT(ISNULL(otm.seismic__Related_Visualforce_Page_Name__c))}">
		                        {!otm.seismic__Related_Visualforce_Page_Name__c}
		                    </apex:outputpanel>
		                </apex:column>
		                <apex:column />
		            </apex:pageBlockTable>
		            <apex:pageBlockSection rendered="{!objNewDocMappings.empty}" columns="1">
		                No records to display
		            </apex:pageBlockSection>
		        </apex:pageBlock>
		        <!-- New Document Button end --> 
			</apex:form>
		</apex:tab>
	</apex:tabPanel>
    
    <c:DeleteVisualforcePage oninfo="showMessage('info', infoMessage)" onerror="showMessage('error', errorMessage)" ></c:DeleteVisualforcePage>

    <apex:form id="editObjectMapping" rendered="{!isEditObjectMapping}">
        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true" oncomplete="enableAllButtons&&enableAllButtons()">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction>
        <apex:sectionHeader title="{!IF(isEditObjectDocMapping || isEditObjectNewDocMapping, 'Document', 'Folder')} Button" subtitle="{!IF(NOT(ISBLANK(newObjectTypeMapping.seismic__Object_Label__c)), newObjectTypeMapping.seismic__Object_Label__c, newObjectTypeMapping.seismic__Object_Name__c)}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}"/>
        <apex:sectionHeader title="{!IF(isEditObjectDocMapping || isEditObjectNewDocMapping, 'Document', 'Folder')} Button" subtitle="New Button" rendered="{!ISNULL(newObjectTypeMapping.Id)}"/>
        <apex:pageMessages id="messages" escape="false" />
        <apex:pageBlock title="{!IF(isEditObjectDocMapping||isEditObjectNewDocMapping, 'Document', 'Folder')} Button Edit" rendered="{!objectTypeMappingAccessable}">
            <apex:pageBlockButtons >
                <script type="text/javascript">
                    function getMissedFields () {                   
                        var fieldsToCheck = {};
                        
                        if({!isEditObjectDocMapping || isEditObjectNewDocMapping}) {
                            fieldsToCheck[buttonNameId] = 'Button Name';
                            if({!ISNULL(newObjectTypeMapping.Id)}) {
                                fieldsToCheck[objectName] = 'Related Object';
                            }
                            
                            fieldsToCheck[teamSite] = 'Profile';
                            fieldsToCheck[documentName] = 'Document Full Path';
                            //fieldsToCheck[generateFormat] = 'Generate Format';
                        } else {                        
                            fieldsToCheck[buttonNameId] = 'Button Name';
                            if({!ISNULL(newObjectTypeMapping.Id)}) {
                                fieldsToCheck[objectName] = 'Related Object';
                            }
                            
                            fieldsToCheck[teamSite] = 'Profile'; 
                            fieldsToCheck[folderName] = 'Folder Full Path';
                        }
                        
                        var missedFields = [];
                        for(var id in fieldsToCheck) {
                            var label = fieldsToCheck[id];
                            
                            var input = document.getElementById(id);
                            if(!input) continue;
                            
                            var value = input.value;
                            if(!value) {
                                missedFields.push(label);
                            }
                        }
                        
                        return missedFields;
                    }
                    
                    function findButtonInMappings(isUpdate, objMappings, currentObjectName, buttonLabel, buttonValue) {                 
                        for (var i = 0; i < objMappings.length; i++) {
                            var dm = objMappings[i];
                            dm['{!PACKAGE_NAME}' + 'Button_Name__c'] = dm['{!PACKAGE_NAME}' + 'Button_Name__c'] || "";
                            dm['{!PACKAGE_NAME}' + 'Button_Name__c'] = dm['{!PACKAGE_NAME}' + 'Button_Name__c'].toLowerCase();
                            buttonLabel = buttonLabel || "";
                            buttonLabel = buttonLabel.toLowerCase();
                            if (dm['{!PACKAGE_NAME}' + 'Object_Name__c'] == currentObjectName && dm['{!PACKAGE_NAME}' + 'Button_Name__c'] == buttonLabel) {
                                if(isUpdate) {
                                    if(buttonValue != dm['{!PACKAGE_NAME}' + 'Button_Value__c']) {
                                        return true;
                                    }
                                } else {
                                    return true;
                                }
                            }
                        }
                        
                        return false;
                    }
                    
                    function hasDuplicateButton(isUpdate) {
                        return false;
                        // Remove validation for assembla #1094
                        /*var buttonLabel = getButtonLabel();
                        var buttonValue = getButtonValue();
                        var currentObjectName = getCurrentObjectName();
                        
                        var objDocMappings = {!objDocMappingsJson};
                        var objFolderMappings = {!objFolderMappingsJson};
                        
                        var found = findButtonInMappings(isUpdate, objDocMappings, currentObjectName, buttonLabel, buttonValue);
                        if(found) {
                            return true;
                        }
                        
                        found = findButtonInMappings(isUpdate, objFolderMappings, currentObjectName, buttonLabel, buttonValue);
                        
                        return found;*/
                    }
                    
                    function getButtonLabel() {
                        var input = document.getElementById(buttonNameId);
                                                
                        return input && input.value;
                    }
                    
                    function getButtonValue() {
                        var input = document.getElementById(buttonValueId);
                                                
                        return input && input.value;
                    }
                    
                    function checkAndSaveButton(callback) {
                        disableAllButtons();
                        var missedFields = getMissedFields();
                        if(missedFields.length > 0) {
                            showError("Required field is missing: [" + missedFields.join(', ') + "]");
                            return false;
                        }
                        
                        var dupliate = hasDuplicateButton();
                        if ('EXCEPTION' == dupliate) {
                            enableAllButtons();
                            return false;
                        } else if(dupliate) {
                            var buttonLabel = getButtonLabel();                         
                            var currentObjectName = getCurrentObjectName();
                            showError("There is already a button named " + buttonLabel + " on Object " + currentObjectName);
                            return false;
                        }
                        
                        var wl = new sforce.SObject("WebLink");
                        
                        wl.DisplayType = 'B';
                        wl.EncodingKey = 'UTF-8';
                        wl.LinkType = 'url';
                        wl.Description = '* Generated by Seismic automatically.\n* Please do NOT change anything manually unless you know what you are doing.';
                                                
                        wl.MasterLabel = getButtonLabel();
                        wl.Name = 'SeismicButton_' + Math.random().toString().replace(".", "");
                        wl.PageOrSobjectType = jQuery("#objectTypeSelector").val(); 
                        wl.OpenType = 'replace';                     
                        
                        if ({!isEditObjectDocMapping}) {
                            //wl.OpenType = 'onClickJavaScript';
                            //var jsTemplate = "{" + "!REQUIRESCRIPT('/resource/' &  LEFT(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(TEXT(NOW()),':',''),'-',''),' ',''),10) & '000/" + "{!PACKAGE_NAME}" + "SeismicRequesterDialog_js')}\n\n/**\n * Generated by Seismic automatically.\n * \n * Please do NOT change anything manually unless you know what you are doing.\n */\nvar title = 'Seismic',\n  objectId = '{" + "![!sobject].Id}',\n  apexBaseUrl = '[!hostName]',\n  buttonApiName = '[!btnApiName]',\n  pageUrl = window.location.href;\n\nopenSeismicRequesterDialog(title, apexBaseUrl, objectId, buttonApiName, pageUrl);";
                            //jsTemplate = jsTemplate.replace("[!sobject]", wl.PageOrSobjectType);
                            //jsTemplate = jsTemplate.replace("[!hostName]", window.location.hostname);
                            //jsTemplate = jsTemplate.replace("[!btnApiName]", wl.Name);
                            //wl.Url = jsTemplate;
                            wl.Url = 'https://' + window.location.hostname + '/apex/SeismicRequester?id={' + '!' + wl.PageOrSobjectType + '.Id}&btnName=' + wl.Name + '&miniDistribution=1';
                        } else if ({!isEditObjectNewDocMapping}) {
                        	wl.Url = 'https://' + window.location.hostname + '/apex/SeismicNewDocRequester?id={' + '!' + wl.PageOrSobjectType + '.Id}&btnName=' + wl.Name;
                        } else {
                            //wl.OpenType = 'replace';
                            wl.Url = 'https://' + window.location.hostname + '/apex/SeismicRequester?id={' + '!' + wl.PageOrSobjectType + '.Id}&btnName=' + wl.Name;
                        }
                        
                        try {
                            var result = sforce.connection.create([wl], {
                                onSuccess : function(result){
                                    if(result && result[0] && result[0].success == 'true') {                                        
                                        document.getElementById(buttonValueId).value = wl.Name;
                                        callback();
                                    } else if(result && result[0] && result[0].errors 
                                            && result[0].errors.statusCode == "INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST" 
                                            && result[0].errors.fields == "PageOrSobjectType") {
                                        showError("Cannot create button on this Object: " + wl.PageOrSobjectType);
                                    } else if(result[0] && result[0].errors && result[0].errors.message){
                                        showError("Failed to create Custom Button: " + result[0].errors.message);
                                    }
                                }, 
                                onFailure : function(error){
                                    showError("Failed to create Custom Button: " + error.message);
                                }
                            });
                        } catch(e) {                            
                            showError('An error has occurred: ' + e.faultstring);
                        }
                    }
                    
                    function checkAndUpdateButton(callback) {
                        disableAllButtons();
                        var missedFields = getMissedFields();
                        if(missedFields.length > 0) {
                            showError("Required field is missing: [" + missedFields.join(', ') + "]");
                            return false;
                        }                       
                        
                        var dupliate = hasDuplicateButton(true);
                        if('EXCEPTION' == dupliate) {
                            enableAllButtons();
                            return false;
                        } else if(dupliate) {
                            var buttonLabel = getButtonLabel();
                            var currentObjectName = getCurrentObjectName();
                            showError("There is already a button named " + buttonLabel + " on Object " + currentObjectName);
                            return false;
                        }
                        
                        var records = [];
                        var result = sforce.connection.query("SELECT ID from WebLink WHERE WebLink.Name='{!JSENCODE(newObjectTypeMapping.Button_Value__c)}'", {
                            onSuccess : function(result){
                                var wl = new sforce.SObject("WebLink");
                                wl.id = result.getArray("records")[0].Id;
                                
                                wl.MasterLabel = getButtonLabel();
                                
                                var result = sforce.connection.update([wl], {
                                    onSuccess : function(result){
                                        if(result && result[0] && result[0].success == 'true') {                                        
                                            callback();
                                        } else if(result[0] && result[0].errors && result[0].errors.message){
                                            showError("Failed to update Custom Button: " + result[0].errors.message);
                                        }
                                    }, 
                                    onFailure : function(error){
                                        showError("Failed to update Custom Button: " + error.message);
                                    }
                                });
                            }, 
                            onFailure : function(error){
                                showError("Failed to create Custom Button: " + error.message);
                            }
                        });
                    }
                </script>
                <apex:actionFunction action="{!saveNewObjectTypeMapping}" name="saveNewObjectTypeMapping" />
                <apex:commandButton id="saveButton" value="Save" rendered="{!ISNULL(newObjectTypeMapping.Id) && objectTypeMappingInsertable}" onclick="checkAndSaveButton(saveNewObjectTypeMapping);return false;"/>
                <apex:actionFunction action="{!updateObjectTypeMapping}" name="updateObjectTypeMapping" />
                <apex:commandButton id="updateButton" value="Save" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}" onclick="checkAndUpdateButton(updateObjectTypeMapping);return false;"/>
                <apex:commandButton id="deleteButton" value="Delete" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingDeleteable}" onclick="checkCanDelete(null, null, '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Name)}', '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c)}'); return false;" />
                <apex:commandButton action="{!backToList}" id="cancelButton" value="Cancel" immediate="true"/>
            </apex:pageBlockButtons>            
        
            <apex:outputPanel rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}">
                <script>
                    function createdVisualforcePage(visualforcePage) {                  
                        showMessage('info', 'Generate Visualforce page successfully. Click <a target="_blank" href="/09D/e?type={!newObjectTypeMapping.seismic__Object_Name__c}&setupid={!newObjectTypeMapping.seismic__Object_Name__c}Links&PageOrSobjectType={!newObjectTypeMapping.seismic__Object_Name__c}&retURL=">here</a> to add Action.');
                    }
                </script>
                <apex:actionFunction name="generatePublisherActionComplete" action="{!saveVisualforcePage}" rerender="messages, editObjectMapping" immediate="true" onbeforedomupdate="createdVisualforcePage(visualforcePage)">
                    <apex:param name="visualforcePage" assignTo="{!visualforcePage}" value=""/>
                    <apex:param name="objectTypeMappingInstanceNameName" assignTo="{!objectTypeMappingInstanceNameName}" value=""/>
                </apex:actionFunction>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable && ISBLANK(newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c)}">
                <apex:actionFunction name="showMessage" action="{!showMessage}" rerender="messages" immediate="true">
                    <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
                    <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
                </apex:actionFunction> 
                <c:GeneratePublisherAction oncomplete="generatePublisherActionComplete(visualforcePage);" oninfo="showMessage('info', infoMessage)" onerror="showMessage('error', errorMessage)" isEditObjectDocMapping="{!isEditObjectDocMapping}"  canvasAppDeveloperName="{!CANVAS_APP_DEVELOPER_NAME}"  packageNameSpace="{!PACKAGE_NAMESPACE}"></c:GeneratePublisherAction>
            </apex:outputPanel>
            
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Button Name" for="newButtonName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Button_Name__c}" id="newButtonName"/>                        
                        <apex:inputHidden value="{!newObjectTypeMapping.seismic__Button_Value__c}" id="newButtonValue" />
                        <script>
                            var buttonNameId = '{!$Component.newButtonName}';
                            var buttonValueId = '{!$Component.newButtonValue}';
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!(isEditObjectDocMapping||isEditObjectNewDocMapping)  && NOT(ISBLANK(newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c))}">
                    <apex:outputLabel value="Visualforce page for Action" />
                    <apex:outputpanel layout="block">{!newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c}</apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!(isEditObjectDocMapping||isEditObjectNewDocMapping) && NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable && ISBLANK(newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c)}">
                    <apex:outputLabel value="Visualforce page for Action"/>
                    <apex:outputpanel layout="block">
                        <a href="javascript: createVisualforcePage('{!JSINHTMLENCODE(newObjectTypeMapping.Button_Value__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Button_Name__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Object_Name__c)}'); void(0);" 
                            id="createVisualforcePageLink">Create Visualforce page for Action</a> 
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block">{!newObjectTypeMapping.Object_Label__c}
                        <script>
                            function getCurrentObjectName() {
                                return '{!JSENCODE(newObjectTypeMapping.Object_Name__c)}';
                            }
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!ISNULL(newObjectTypeMapping.Id)}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"></apex:outputpanel>
                        <select val="{!newObjectTypeMapping.seismic__Object_Name__c}" id="objectTypeSelector">
                            <apex:repeat value="{!displayAllObjectTypes}" var="list"> 
                                <apex:repeat value="{!list}" var="o">
                                    <option value="{!o.value}" >{!o.label}</option>
                                </apex:repeat>
                            </apex:repeat>
                        </select>
                        <apex:inputHidden id="objectTypeSelectorHidden" value="{!newObjectTypeMapping.seismic__Object_Name__c}"/>
                        <script type="text/javascript">
                            var objectName = '{!$Component.objectTypeSelectorHidden}';
                            function getCurrentObjectName() {
                                var input = document.getElementById(objectName);
                                return input && input.value;
                            }
                            
                            jQuery(function(){
                                var $objectTypeSelctor = jQuery("#objectTypeSelector");
                                $objectTypeSelctor.children("option").each(function(k, v){
                                    if(jQuery(v).val() == $objectTypeSelctor.attr("val")){
                                        jQuery(v).attr("selected", "selected");
                                    }
                                });
                                
                                document.getElementById('{!$Component.objectTypeSelectorHidden}').value = jQuery("#objectTypeSelector").val();
                                
                                jQuery("#objectTypeSelector").change(function(){
                                    document.getElementById('{!$Component.objectTypeSelectorHidden}').value = jQuery(this).val();
                                });
                            });
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>                
                <apex:pageBlockSectionItem rendered="{!NOT(isEditObjectDocMapping || isEditObjectNewDocMapping)}" >
                    <apex:outputLabel value="Filters"/>
                    <apex:outputpanel layout="block">
                        <span style="display:none" class="filtersData">
                            <apex:inputHidden id="filtersData" value="{!filtersData}" />
                        </span>
                        <span style="display:none" class="filterLogic">
                            <apex:inputHidden id="filterLogic" value="{!newObjectTypeMapping.seismic__FilterLogic__c}" />
                        </span>
                        <table class="filtersTable list" style="width: 500px;">
                            <thead class="rich-table-thead">
                                <tr class="headerRow">
                                    <th class="headerRow">Custom Property in Seismic</th>
                                    <th class="headerRow">Operator</th>
                                    <th class="headerRow">Field in Salesforce</th>
                                </tr>
                            </thead>
                            <tbody>                             
                            </tbody>
                        </table>
                        <div style="height: 25px; line-height: 25px;">
                            Matching: 
                            <select id="filterLogicSelector" val="{!newObjectTypeMapping.seismic__FilterLogic__c}">
                                <option value="AND">All</option>
                                <option value="OR">Any</option>
                            </select>
                        </div>
                        <button class="editFilters btn">
                            Edit
                        </button>
                        <button class="clearFilters btn">
                            Clear
                        </button>
                        
                        
                        <script type="text/javascript">
                            jQuery(function(){
                                var $filterLogicSelector = jQuery("#filterLogicSelector");
                                $filterLogicSelector.children("option").each(function(k, v){
                                    if (jQuery(v).val() == $filterLogicSelector.attr("val")){
                                        jQuery(v).attr("selected", "selected");
                                    }
                                });
                                
                                jQuery("#filterLogicSelector").change(function(){
                                    document.getElementById('{!$Component.filterLogic}').value = jQuery(this).val();
                                });
                            });
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageblocksectionitem >
                    <apex:outputLabel value="Profile" for="newTeamSite"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Team_Site__c}" id="newTeamSite"/>
                        <script>
                            var teamSite = '{!$Component.newTeamSite}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
                <apex:pageblocksectionitem rendered="{!NOT(isEditObjectDocMapping || isEditObjectNewDocMapping)}">
                    <apex:outputLabel value="Folder Full Path" for="newFolderName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Filter_List_Name__c}" id="newFolderName"/>
                        <script>
                            var folderName = '{!$Component.newFolderName}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
                <apex:pageblocksectionitem rendered="{!isEditObjectDocMapping || isEditObjectNewDocMapping}">
                    <apex:outputLabel value="Document Full Path" for="newDocumentName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Document_Name__c}" id="newDocumentName"/>
                        <script>
                            var documentName = '{!$Component.newDocumentName}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
                <apex:pageblocksectionitem rendered="{!isEditObjectDocMapping}">
                    <apex:outputLabel value="Default Format" for="newGenerateFormat"/>
                    <apex:outputpanel layout="block">
                        <apex:outputpanel layout="block"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Generate_Format__c}" id="newGenerateFormat"/>
                        <script>
                            var generateFormat = '{!$Component.newGenerateFormat}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:form>
    
    <apex:form id="editSystemDefinedPredictiveMapping" rendered="{!isEditSystemDefinedPredictiveMapping}">
        <apex:actionFunction name="showMessage" action="{!showMessage}" rerender="messages" immediate="true">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction> 
        
        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true" oncomplete="enableAllButtons&&enableAllButtons()">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction>

        <apex:sectionHeader title="Visualforce Page" subtitle="{!IF(NOT(ISBLANK(newObjectTypeMapping.seismic__Object_Label__c)), newObjectTypeMapping.seismic__Object_Label__c, newObjectTypeMapping.seismic__Object_Name__c)}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}"/>

        <apex:sectionHeader title="Visualforce Page" subtitle="New Page" rendered="{!ISNULL(newObjectTypeMapping.Id)}"/>

        <apex:pageMessages id="messages" escape="false" />

        <apex:pageBlock title="System Defined Predictive Edit" rendered="{!objectTypeMappingAccessable}">
            <apex:pageBlockButtons >
                <apex:variable value="{!IF(ISBLANK(newObjectTypeMapping.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, newObjectTypeMapping.seismic__Button_Name__c )}" var="pageName" />
                <apex:commandButton id="saveButton" value="Save" rendered="{!ISNULL(newObjectTypeMapping.Id) && objectTypeMappingInsertable}" action="{!SaveSystemDefinedPredictivePage}"/>
                <apex:commandButton id="updateButton" value="Save" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}" action="{!updateSystemDefinedPredictivePage}"/>
                <apex:commandButton id="deleteButton" value="Delete" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingDeleteable}"  onclick="checkCanDelete(null, null, '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Name)}', '{!JSINHTMLENCODE(pageName)}'); return false;"  />
                <apex:commandButton action="{!backToList}" id="cancelButton" value="Cancel" immediate="true"/>
            </apex:pageBlockButtons>            
            
            <apex:pageBlockSection columns="1">

                <apex:pageBlockSectionItem rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block">{!newObjectTypeMapping.Object_Label__c}
                        <script>
                            function getCurrentObjectName() {
                                return '{!JSENCODE(newObjectTypeMapping.Object_Name__c)}';
                            }
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem rendered="{!ISNULL(newObjectTypeMapping.Id)}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"></apex:outputpanel>
                        <select val="{!newObjectTypeMapping.seismic__Object_Name__c}" id="objectTypeSelector">
                            <apex:repeat value="{!displayAllObjectTypes}" var="list">
                                <apex:repeat value="{!list}" var="o">
                                    <option value="{!o.value}" >{!o.label}</option>
                                </apex:repeat>
                            </apex:repeat>
                        </select>
                        <apex:inputHidden id="objectTypeSelectorHidden" value="{!newObjectTypeMapping.seismic__Object_Name__c}"/>
                        <script>
                            var objectName = '{!$Component.objectTypeSelectorHidden}';
                            function getCurrentObjectName() {
                                var input = document.getElementById(objectName);
                                return input && input.value;
                            }
                            
                            jQuery(function(){
                                var $objectTypeSelctor = jQuery("#objectTypeSelector");
                                $objectTypeSelctor.children("option").each(function(k, v){
                                    if(jQuery(v).val() == $objectTypeSelctor.attr("val")){
                                        jQuery(v).attr("selected", "selected");
                                    }
                                });
                                
                                document.getElementById('{!$Component.objectTypeSelectorHidden}').value = jQuery("#objectTypeSelector").val();
                                
                                jQuery("#objectTypeSelector").change(function(){
                                    document.getElementById('{!$Component.objectTypeSelectorHidden}').value = jQuery(this).val();
                                });
                            });
                            
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Predictive Component Name" for="newPageName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputtext value="{!newObjectTypeMapping.seismic__Button_Name__c}" id="newPageName" maxlength="80" />                        
                        <apex:inputHidden value="{!newObjectTypeMapping.seismic__Button_Value__c}" id="newButtonValue" />
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>

                <apex:pageblocksectionitem >
                    <apex:outputLabel value="Predictive Content Setting Title" for="newTeamSite"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Team_Site__c}" id="newTeamSite"/>
                        <script>
                            var teamSite = '{!$Component.newTeamSite}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>

                <apex:pageblocksectionitem >
                    <apex:outputLabel value="Additional Visualforce Parameter" />
                    <apex:outputpanel layout="block">
                        <apex:outputpanel layout="block"/>
                        <apex:inputtext id="newVisualforceParameter" value="{!newObjectTypeMapping.seismic__VisualforceParameter__c}" maxlength="255" />
                    </apex:outputpanel>
                </apex:pageblocksectionitem>

            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:form>
    
    <apex:form id="editVisualforcePageMapping" rendered="{!isEditVisualforcePageMapping}">
        <apex:actionFunction name="showMessage" action="{!showMessage}" rerender="messages" immediate="true">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction> 
        
        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true" oncomplete="enableAllButtons&&enableAllButtons()">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction>

        <apex:sectionHeader title="Visualforce Page" subtitle="{!IF(NOT(ISBLANK(newObjectTypeMapping.seismic__Object_Label__c)), newObjectTypeMapping.seismic__Object_Label__c, newObjectTypeMapping.seismic__Object_Name__c)}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}"/>

        <apex:sectionHeader title="Visualforce Page" subtitle="New Page" rendered="{!ISNULL(newObjectTypeMapping.Id)}"/>

        <apex:pageMessages id="messages" escape="false" />

        <apex:pageBlock title="Predictive Content Edit" rendered="{!objectTypeMappingAccessable}">
            <apex:pageBlockButtons >
                <apex:variable value="{!IF(ISBLANK(newObjectTypeMapping.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, newObjectTypeMapping.seismic__Button_Name__c )}" var="pageName" />
                <apex:commandButton id="saveButton" value="Save" rendered="{!ISNULL(newObjectTypeMapping.Id) && objectTypeMappingInsertable}" action="{!SaveNewVisualforcePage}"/>
                <apex:commandButton id="updateButton" value="Save" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}" action="{!updateVisualforcePage}"/>
                <apex:commandButton id="deleteButton" value="Delete" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingDeleteable}"  onclick="checkCanDelete(null, null, '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Name)}', '{!JSINHTMLENCODE(pageName)}'); return false;"  />
                <apex:commandButton action="{!backToList}" id="cancelButton" value="Cancel" immediate="true"/>
            </apex:pageBlockButtons>            
            
            <apex:pageBlockSection columns="1">

                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Name" for="newPageName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputtext value="{!newObjectTypeMapping.seismic__Button_Name__c}" id="newPageName" maxlength="80" />                        
                        <apex:inputHidden value="{!newObjectTypeMapping.seismic__Button_Value__c}" id="newButtonValue" />
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block">{!newObjectTypeMapping.Object_Label__c}
                        <script>
                            function getCurrentObjectName() {
                                return '{!JSENCODE(newObjectTypeMapping.Object_Name__c)}';
                            }
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>

                <apex:pageBlockSectionItem rendered="{!ISNULL(newObjectTypeMapping.Id)}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"></apex:outputpanel>
                        <select val="{!newObjectTypeMapping.seismic__Object_Name__c}" id="objectTypeSelector">
                            <apex:repeat value="{!displayAllObjectTypes}" var="list">
                                <apex:repeat value="{!list}" var="o">
                                    <option value="{!o.value}" >{!o.label}</option>
                                </apex:repeat>
                            </apex:repeat>
                        </select>
                        <apex:inputHidden id="objectTypeSelectorHidden" value="{!newObjectTypeMapping.seismic__Object_Name__c}"/>
                        <script>
                            var objectName = '{!$Component.objectTypeSelectorHidden}';
                            function getCurrentObjectName() {
                                var input = document.getElementById(objectName);
                                return input && input.value;
                            }
                            
                            jQuery(function(){
                                var $objectTypeSelctor = jQuery("#objectTypeSelector");
                                $objectTypeSelctor.children("option").each(function(k, v){
                                    if(jQuery(v).val() == $objectTypeSelctor.attr("val")){
                                        jQuery(v).attr("selected", "selected");
                                    }
                                });
                                
                                document.getElementById('{!$Component.objectTypeSelectorHidden}').value = jQuery("#objectTypeSelector").val();
                                
                                jQuery("#objectTypeSelector").change(function(){
                                    document.getElementById('{!$Component.objectTypeSelectorHidden}').value = jQuery(this).val();
                                });
                            });
                            
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>   

                <apex:pageBlockSectionItem rendered="{!NOT(isEditObjectDocMapping || isEditObjectNewDocMapping)}" >
                    <apex:outputLabel value="Filters"/>
                    <apex:outputpanel layout="block">
                        <span style="display:none" class="filtersData">
                            <apex:inputHidden id="filtersData" value="{!filtersData}" />
                        </span>

                        <table class="filtersTable list" style="width: 500px;">
                            <thead class="rich-table-thead">
                                <tr class="headerRow">
                                    <th class="headerRow">Custom Property in Seismic</th>
                                    <th class="headerRow">Operator</th>
                                    <th class="headerRow">Field in Salesforce</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        
                        <button class="editFilters btn">
                            Edit
                        </button>
                        <button class="clearFilters btn">
                            Clear
                        </button>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>

                <apex:pageblocksectionitem >
                    <apex:outputLabel value="Profile" for="newTeamSite"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Team_Site__c}" id="newTeamSite"/>
                        <script>
                            var teamSite = '{!$Component.newTeamSite}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>

                <apex:pageblocksectionitem rendered="{!NOT(isEditObjectDocMapping||isEditObjectNewDocMapping)}">
                    <apex:outputLabel value="Folder Full Path" for="newFolderName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Filter_List_Name__c}" id="newFolderName"/>
                        <script>
                            var folderName = '{!$Component.newFolderName}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>

                <apex:pageblocksectionitem rendered="{!isEditObjectDocMapping||isEditObjectNewDocMapping}">
                    <apex:outputLabel value="Document Full Path" for="newDocumentName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Document_Name__c}" id="newDocumentName"/>
                        <script>
                            var documentName = '{!$Component.newDocumentName}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>

                <apex:pageblocksectionitem rendered="{!isEditObjectDocMapping ||isEditObjectNewDocMapping}">
                    <apex:outputLabel value="Default Format" for="newGenerateFormat"/>
                    <apex:outputpanel layout="block">
                        <apex:outputpanel layout="block"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Generate_Format__c}" id="newGenerateFormat"/>
                        <script>
                            var generateFormat = '{!$Component.newGenerateFormat}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>

            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:form>

    <apex:form id="editCustomTabMapping" rendered="{!isEditTabMapping}">
        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction>
        <apex:sectionHeader title="Custom Tab Mapping" subtitle="{!newCustomTabMapping.seismic__Custom_Tab__c}" rendered="{!NOT(ISNULL(newCustomTabMapping.Id))}"/>
        <apex:sectionHeader title="Custom Tab Mapping" subtitle="New Mapping" rendered="{!ISNULL(newCustomTabMapping.Id)}"/>
        <apex:pageMessages id="messages" escape="false" />
        <apex:pageBlock title="Custom Tab Mapping Edit" rendered="{!objectTypeMappingAccessable}">
            <apex:pageBlockButtons >
                <apex:commandButton action="{!saveNewCustomTabMapping}" id="saveButton" value="Save" rendered="{!ISNULL(newCustomTabMapping.Id) && customTabMappingInsertable}" disabled="{!isRetrievingCustomTabs}"/>
                <apex:commandButton action="{!updateCustomTabMapping}" id="updateButton" value="Save" rendered="{!NOT(ISNULL(newCustomTabMapping.Id)) && customTabMappingUpdatable}" disabled="{!isRetrievingCustomTabs}"/>
                <apex:commandButton action="{!deleteCustomTabMapping}" id="deleteButton" value="Delete" rendered="{!NOT(ISNULL(newCustomTabMapping.Id)) && customTabMappingDeleteable}" onclick="return window.confirm('Are you sure you want to delete this button?')" disabled="{!isRetrievingCustomTabs}"/>
                <apex:commandButton action="{!backToList}" id="cancelButton" value="Cancel" immediate="true" disabled="{!isRetrievingCustomTabs}" />
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="1" rendered="{!NOT(isRetrievingCustomTabs)}">               
                <apex:pageBlockSectionItem rendered="{!NOT(cannotListCustomTab)}">
                    <apex:outputLabel value="Custom Tab" for="newCustomTab"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"></apex:outputpanel>
                        <select val="{!newCustomTabMapping.seismic__Custom_Tab_Id__c}" id="customTabSelector" 
                            onchange="document.getElementById('{!$Component.customTabSelectorHidden}').value=this.value;">
                            <apex:repeat value="{!displayAllCustomTabs}" var="list"> 
                                <apex:repeat value="{!list}" var="o">
                                    <option value="{!o.value}" >{!o.label}</option>
                                </apex:repeat>
                            </apex:repeat>
                        </select>                        
                        <apex:inputHidden id="customTabSelectorHidden" value="{!newCustomTabMapping.seismic__Custom_Tab_Id__c}"/>
                        <script>
                            jQuery(function(){
                                var $customTabSelector = jQuery("#customTabSelector");
                                $customTabSelector.children("option").each(function(k, v){
                                    if(jQuery(v).val() == $customTabSelector.attr("val")){
                                        jQuery(v).attr("selected", "selected");
                                    }
                                });
                                
                                document.getElementById('{!$Component.customTabSelectorHidden}').value = jQuery("#customTabSelector").val();
                                
                                jQuery("#customTabSelector").change(function(){
                                    document.getElementById('{!$Component.customTabSelectorHidden}').value = jQuery(this).val();                             
                                });
                            });
                        </script>
                    </apex:outputpanel> 
                </apex:pageBlockSectionItem>
                
                <apex:pageBlockSectionItem rendered="{!cannotListCustomTab}">
                    <apex:outputLabel value="Custom Tab Id" for="customTab_customTabId_for_edit"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newCustomTabMapping.seismic__Custom_Tab_Id__c}" id="customTab_customTabId_for_edit"/>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>                
                <apex:pageBlockSectionItem rendered="{!cannotListCustomTab}">
                    <apex:outputLabel value="Custom Tab Name" for="customTab_customTabName_for_edit"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputText value="{!newCustomTabMapping.seismic__Custom_Tab__c}" id="customTab_customTabName_for_edit"/>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Profile" for="customTab_teamSite_for_edit"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputText value="{!newCustomTabMapping.seismic__Team_Site__c}" id="customTab_teamSite_for_edit"/>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Folder Full Path" for="customTab_filterListName_for_edit"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputText value="{!newCustomTabMapping.seismic__Filter_List_Name__c}" id="customTab_filterListName_for_edit"/>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:pageBlockSection columns="1" rendered="{!isRetrievingCustomTabs}">
                <apex:outputField value="{!newCustomTabMapping.seismic__Custom_Tab__c}" />
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Profile" for="customTab_teamSite_for_display"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputText value="{!newCustomTabMapping.seismic__Team_Site__c}" id="customTab_teamSite_for_display"/>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Folder Full Path" for="customTab_filterListName_for_display"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputText value="{!newCustomTabMapping.seismic__Filter_List_Name__c}" id="customTab_filterListName_for_display"/>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
        </apex:pageBlock>
        
        <apex:outputPanel rendered="{!isRetrievingCustomTabs}">
            <apex:actionFunction name="retrieveCustomTabsComplete" action="{!retrieveCustomTabsComplete}" rerender="messages, editCustomTabMapping" immediate="true">
                <apex:param name="customTabListString" assignTo="{!customTabListString}" value=""/>
            </apex:actionFunction>
            <apex:actionFunction name="showMessage" action="{!showMessage}" rerender="messages, editCustomTabMapping" immediate="true">
                <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
                <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
                <apex:param name="isRetrievingCustomTabs" assignTo="{!isRetrievingCustomTabs}" value="false"/>
                <apex:param name="cannotListCustomTab" assignTo="{!cannotListCustomTab}" value="true"/>
            </apex:actionFunction>
            <c:RetrieveCustomTabs oncomplete="retrieveCustomTabsComplete(customTabListString);" oninfo="showMessage('info', infoMessage)" onwarning="showMessage('warning', warningMessage)" onerror="showMessage('error', errorMessage)" tabType="page" componentType="SeismicRequester"></c:RetrieveCustomTabs>
        </apex:outputPanel>
    </apex:form>

	<apex:form id="editObjectMappingLightning" rendered="{!isEditObjectMappingLightning}">
        <apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true" oncomplete="enableAllButtons&&enableAllButtons()">
            <apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value=""/>
            <apex:param name="messageToShow" assignTo="{!messageToShow}" value=""/>
        </apex:actionFunction>
        <apex:sectionHeader title="Folder Button" subtitle="{!IF(NOT(ISBLANK(newObjectTypeMapping.seismic__Object_Label__c)), newObjectTypeMapping.seismic__Object_Label__c, newObjectTypeMapping.seismic__Object_Name__c)}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}"/>
        <apex:sectionHeader title="Folder Button" subtitle="New Button" rendered="{!ISNULL(newObjectTypeMapping.Id)}"/>
        <apex:pageMessages id="messages" escape="false" />
        <apex:pageBlock title="Tab Shortcut Button Edit" rendered="{!objectTypeMappingAccessable}">
            <apex:pageBlockButtons >
                <script type="text/javascript">
                    function getMissedFieldsLightning () {                   
                        var fieldsToCheck = {};                 
                        fieldsToCheck[buttonNameId] = 'Button Name';
                        if({!ISNULL(newObjectTypeMapping.Id)}) {
                            fieldsToCheck[objectName] = 'Related Object';
                        }
                        
                        fieldsToCheck[newEmbeddedApplication] = 'Embedded Application'; 
                        
                        var missedFields = [];
                        for(var id in fieldsToCheck) {
                            var label = fieldsToCheck[id];
                            
                            var input = document.getElementById(id);
                            if(!input) continue;
                            
                            var value = input.value;
                            if(!value) {
                                missedFields.push(label);
                            }
                        }
                        
                        return missedFields;
                    }
                    
                    function findButtonInMappingsLightning(isUpdate, objMappings, currentObjectName, buttonLabel, buttonValue) {                 
                        for (var i = 0; i < objMappings.length; i++) {
                            var dm = objMappings[i];
                            dm['{!PACKAGE_NAME}' + 'Button_Name__c'] = dm['{!PACKAGE_NAME}' + 'Button_Name__c'] || "";
                            dm['{!PACKAGE_NAME}' + 'Button_Name__c'] = dm['{!PACKAGE_NAME}' + 'Button_Name__c'].toLowerCase();
                            buttonLabel = buttonLabel || "";
                            buttonLabel = buttonLabel.toLowerCase();
                            if (dm['{!PACKAGE_NAME}' + 'Object_Name__c'] == currentObjectName && dm['{!PACKAGE_NAME}' + 'Button_Name__c'] == buttonLabel) {
                                if(isUpdate) {
                                    if(buttonValue != dm['{!PACKAGE_NAME}' + 'Button_Value__c']) {
                                        return true;
                                    }
                                } else {
                                    return true;
                                }
                            }
                        }
                        
                        return false;
                    }
                    
                    function hasDuplicateButtonLightning(isUpdate) {
                        return false;
                    }
                    
                    function getButtonLabelLightning() {
                        var input = document.getElementById(buttonNameId);              
                        return input && input.value;
                    }
                    
                    function getNewEmbeddedApplicationLightning(){
                    	var input = document.getElementById(newEmbeddedApplication);
                    	return input && input.value;
                    }
                    
                    function getNewSelectedTabLightning(){
                    	var input = document.getElementById(newSelectedTab);
                    	return (input && input.value) || '';
                    }
                    
                    function getButtonValueLightning() {
                        var input = document.getElementById(buttonValueId);                          
                        return input && input.value;
                    }
                    
                    function checkAndSaveButtonLightning(callback) {
                        disableAllButtons();
                        var missedFields = getMissedFieldsLightning();
                        if(missedFields.length > 0) {
                            showError("Required field is missing: [" + missedFields.join(', ') + "]");
                            return false;
                        }
                        
                        var dupliate = hasDuplicateButtonLightning();
                        if ('EXCEPTION' == dupliate) {
                            enableAllButtons();
                            return false;
                        } else if(dupliate) {
                            var buttonLabel = getButtonLabelLightning();                         
                            var currentObjectName = getCurrentObjectName();
                            showError("There is already a button named " + buttonLabel + " on Object " + currentObjectName);
                            return false;
                        }
                        
                        var wl = new sforce.SObject("WebLink");
                        
                        wl.DisplayType = 'B';
                        wl.EncodingKey = 'UTF-8';
                        wl.LinkType = 'url'; // sControl,javascript,page,flow
                        wl.Description = '* Generated by Seismic automatically.\n* Please do NOT change anything manually unless you know what you are doing.';
                                                
                        wl.MasterLabel = getButtonLabelLightning();
                        wl.Name = 'SeismicButton_' + Math.random().toString().replace(".", "");
                        wl.PageOrSobjectType = jQuery("#objectTypeSelectorLightning").val(); 
                        wl.OpenType = 'replace'; // newWindow,sidebar,noSidebar,replace,onClickJavaScript
                        var backUrl = "https://"+window.location.hostname+"/"+"{"+"!"+wl.PageOrSobjectType+".Id}";
                        var url = "https://"+window.location.hostname+"/apex/SeismicFolderPage?sObjectId={"+"!"+wl.PageOrSobjectType+".Id}&sObjectType="+wl.PageOrSobjectType+"&applicationName="+getNewEmbeddedApplicationLightning()+"&tabName="+getNewSelectedTabLightning()+"&backUrl="+backUrl;                      
                        wl.Url=url;
                                              
                        try {
                            var result = sforce.connection.create([wl], {
                                onSuccess : function(result){
                                    if(result && result[0] && result[0].success == 'true') {                                        
                                        document.getElementById(buttonValueId).value = wl.Name;
                                        callback();
                                    } else if(result && result[0] && result[0].errors 
                                            && result[0].errors.statusCode == "INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST" 
                                            && result[0].errors.fields == "PageOrSobjectType") {
                                        showError("Cannot create button on this Object: " + wl.PageOrSobjectType);
                                    } else if(result[0] && result[0].errors && result[0].errors.message){
                                        showError("Failed to create Custom Button: " + result[0].errors.message);
                                    }
                                }, 
                                onFailure : function(error){
                                    showError("Failed to create Custom Button: " + error.message);
                                }
                            });
                        } catch(e) {                            
                            showError('An error has occurred: ' + e.faultstring);
                        }
                    }
                    
                    function checkAndUpdateButtonLightning(callback) {
                        disableAllButtons();
                        var missedFields = getMissedFieldsLightning();
                        if(missedFields.length > 0) {
                            showError("Required field is missing: [" + missedFields.join(', ') + "]");
                            return false;
                        }                       
                        
                        var dupliate = hasDuplicateButtonLightning(true);
                        if('EXCEPTION' == dupliate) {
                            enableAllButtons();
                            return false;
                        } else if(dupliate) {
                            var buttonLabel = getButtonLabelLightning();
                            var currentObjectName = getCurrentObjectName();
                            showError("There is already a button named " + buttonLabel + " on Object " + currentObjectName);
                            return false;
                        }
                        
                        var records = [];
                        var result = sforce.connection.query("SELECT ID from WebLink WHERE WebLink.Name='{!JSENCODE(newObjectTypeMapping.Button_Value__c)}'", {
                            onSuccess : function(result){
                                var wl = new sforce.SObject("WebLink");
                                wl.id = result.getArray("records")[0].Id;
                                
                                wl.MasterLabel = getButtonLabelLightning();
                                var backUrl = "https://"+window.location.hostname+"/"+"{"+"!"+getCurrentObjectName()+".Id}";
                                var url = "https://"+window.location.hostname+"/apex/SeismicFolderPage?sObjectId={"+"!"+getCurrentObjectName()+".Id}&sObjectType="+getCurrentObjectName()+"&applicationName="+getNewEmbeddedApplicationLightning()+"&tabName="+getNewSelectedTabLightning()+"&backUrl="+backUrl;
                                wl.Url = url;
                                var result = sforce.connection.update([wl], {
                                    onSuccess : function(result){
                                        if(result && result[0] && result[0].success == 'true') {                                        
                                            callback();
                                        } else if(result[0] && result[0].errors && result[0].errors.message){
                                            showError("Failed to update Custom Button: " + result[0].errors.message);
                                        }
                                    }, 
                                    onFailure : function(error){
                                        showError("Failed to update Custom Button: " + error.message);
                                    }
                                });
                            }, 
                            onFailure : function(error){
                                showError("Failed to create Custom Button: " + error.message);
                            }
                        });
                    }
                </script>
                <apex:actionFunction action="{!saveNewObjectTypeMapping}" name="saveNewObjectTypeMappingLightning" />
                <apex:commandButton id="saveButtonLightning" value="Save" rendered="{!ISNULL(newObjectTypeMapping.Id) && objectTypeMappingInsertable}" onclick="checkAndSaveButtonLightning(saveNewObjectTypeMappingLightning);return false;"/>
                <apex:actionFunction action="{!updateObjectTypeMapping}" name="updateObjectTypeMappingLightning" />
                <apex:commandButton id="updateButtonLightning" value="Save" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}" onclick="checkAndUpdateButtonLightning(updateObjectTypeMappingLightning);return false;"/>
                <apex:commandButton id="deleteButtonLightning" value="Delete" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingDeleteable}" onclick="checkCanDelete(null, null, '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Name)}', '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Related_Visualforce_Page_Name__c)}'); return false;" />
                <apex:commandButton action="{!backToList}" id="cancelButtonLightning" value="Cancel" immediate="true"/>
            </apex:pageBlockButtons>            
        
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Button Name" for="newButtonName"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Button_Name__c}" id="newButtonNameLightning"/>                        
                        <apex:inputHidden value="{!newObjectTypeMapping.seismic__Button_Value__c}" id="newButtonValueLightning" />
                        <script>
                            var buttonNameId = '{!$Component.newButtonNameLightning}';
                            var buttonValueId = '{!$Component.newButtonValueLightning}';
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block">{!newObjectTypeMapping.Object_Label__c}
                        <script>
                            function getCurrentObjectName() {
                                return '{!JSENCODE(newObjectTypeMapping.Object_Name__c)}';
                            }
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!ISNULL(newObjectTypeMapping.Id)}" >
                    <apex:outputLabel value="Related Object" for="newObjectType"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"></apex:outputpanel>
                        <select val="{!newObjectTypeMapping.seismic__Object_Name__c}" id="objectTypeSelectorLightning">
                            <apex:repeat value="{!displayAllObjectTypes}" var="list"> 
                                <apex:repeat value="{!list}" var="o">
                                    <option value="{!o.value}" >{!o.label}</option>
                                </apex:repeat>
                            </apex:repeat>
                        </select>
                        <apex:inputHidden id="objectTypeSelectorHiddenLightning" value="{!newObjectTypeMapping.seismic__Object_Name__c}"/>
                        <script type="text/javascript">
                            var objectName = '{!$Component.objectTypeSelectorHiddenLightning}';
                            function getCurrentObjectName() {
                                var input = document.getElementById(objectName);
                                return input && input.value;
                            }
                            jQuery(function(){
                                var $objectTypeSelctor = jQuery("#objectTypeSelectorLightning");
                                $objectTypeSelctor.children("option").each(function(k, v){
                                    if(jQuery(v).val() == $objectTypeSelctor.attr("val")){
                                        jQuery(v).attr("selected", "selected");
                                    }
                                });
                                
                                document.getElementById('{!$Component.objectTypeSelectorHiddenLightning}').value = jQuery("#objectTypeSelectorLightning").val();
                                
                                jQuery("#objectTypeSelectorLightning").change(function(){
                                    document.getElementById('{!$Component.objectTypeSelectorHiddenLightning}').value = jQuery(this).val();
                                });
                            });
                        </script>
                    </apex:outputpanel>
                </apex:pageBlockSectionItem>
                <apex:pageblocksectionitem >
                    <apex:outputLabel value="Embedded Application" for="newEmbeddedApplication"/>
                    <apex:outputpanel layout="block" styleClass="requiredInput">
                        <apex:outputpanel layout="block" styleClass="requiredBlock"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Embedded_Application__c}" id="newEmbeddedApplication"/>
                        <script>
                            var newEmbeddedApplication = '{!$Component.newEmbeddedApplication}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
                <apex:pageblocksectionitem >
                    <apex:outputLabel value="Selected Tab" for="newSelectedTab"/>
                    <apex:outputpanel layout="block">
                        <apex:outputpanel layout="block"/>
                        <apex:inputfield value="{!newObjectTypeMapping.seismic__Selected_Tab__c}" id="newSelectedTab"/>
                        <script>
                            var newSelectedTab = '{!$Component.newSelectedTab}';
                        </script>
                    </apex:outputpanel>
                </apex:pageblocksectionitem>
            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:form>
    
    <apex:form id="editNewPredictiveMapping" rendered="{!isEditNewPredictiveMapping}">
		<apex:actionFunction name="showMessage" action="{!showMessage}" rerender="messages" immediate="true">
			<apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value="" />
			<apex:param name="messageToShow" assignTo="{!messageToShow}" value="" />
		</apex:actionFunction>

		<apex:actionFunction name="showGlobalMessage" action="{!showGlobalMessage}" rerender="messages" immediate="true" oncomplete="enableAllButtons&&enableAllButtons()">
			<apex:param name="messageTypeToShow" assignTo="{!messageTypeToShow}" value="" />
			<apex:param name="messageToShow" assignTo="{!messageToShow}" value="" />
		</apex:actionFunction>

		<apex:sectionHeader title="Visualforce Page" subtitle="{!IF(NOT(ISBLANK(newObjectTypeMapping.seismic__Object_Label__c)), newObjectTypeMapping.seismic__Object_Label__c, newObjectTypeMapping.seismic__Object_Name__c)}" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}" />

		<apex:sectionHeader title="Visualforce Page" subtitle="New Page" rendered="{!ISNULL(newObjectTypeMapping.Id)}" />

		<apex:pageMessages id="messages" escape="false" />

		<apex:pageBlock title="Embedded Application for Classic Edit" rendered="{!objectTypeMappingAccessable}">
			<apex:pageBlockButtons >
				<apex:variable value="{!IF(ISBLANK(newObjectTypeMapping.seismic__Button_Name__c), DEFAULT_BUTTON_LABEL, newObjectTypeMapping.seismic__Button_Name__c )}" var="pageName" />
				<apex:commandButton id="saveNewPredictive" value="Save" rendered="{!ISNULL(newObjectTypeMapping.Id) && objectTypeMappingInsertable && isEditNewPredictiveMapping}" action="{!SaveNewPredictive}" />
				<apex:commandButton id="updateButton" value="Save" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingUpdatable}" action="{!updateNewPredictive}" />
				<apex:commandButton id="deleteButton" value="Delete" rendered="{!NOT(ISNULL(newObjectTypeMapping.Id)) && objectTypeMappingDeleteable}" onclick="checkCanDelete(null, null, '{!JSINHTMLENCODE(newObjectTypeMapping.seismic__Button_Value__c)}', '{!JSINHTMLENCODE(newObjectTypeMapping.Name)}', '{!JSINHTMLENCODE(pageName)}'); return false;" />
				<apex:commandButton action="{!backToList}" id="cancelButton" value="Cancel" immediate="true" />
			</apex:pageBlockButtons>

			<apex:pageBlockSection columns="1">
				<apex:pageBlockSectionItem >
					<apex:outputLabel value="Name" for="newPageName" />
					<apex:outputpanel layout="block" styleClass="requiredInput">
						<apex:outputpanel layout="block" styleClass="requiredBlock" />
						<apex:inputtext value="{!newObjectTypeMapping.seismic__Button_Name__c}"
							id="newPageName" maxlength="80" />
						<apex:inputHidden value="{!newObjectTypeMapping.seismic__Button_Value__c}"
							id="newButtonValue" />
					</apex:outputpanel>
				</apex:pageBlockSectionItem>

				<apex:pageBlockSectionItem rendered="{!NOT(ISNULL(newObjectTypeMapping.Id))}">
					<apex:outputLabel value="Related Object" for="newObjectType" />
					<apex:outputpanel layout="block">{!newObjectTypeMapping.Object_Label__c}
                        <script>
                            function getCurrentObjectName() {
                                return '{!JSENCODE(newObjectTypeMapping.Object_Name__c)}';
                            }
                        </script>
					</apex:outputpanel>
				</apex:pageBlockSectionItem>

				<apex:pageBlockSectionItem rendered="{!ISNULL(newObjectTypeMapping.Id)}">
					<apex:outputLabel value="Related Object" for="newObjectType" />
					<apex:outputpanel layout="block" styleClass="requiredInput">
						<apex:outputpanel layout="block" styleClass="requiredBlock"></apex:outputpanel>
						<select val="{!newObjectTypeMapping.seismic__Object_Name__c}" id="objectTypeSelectorNewPredictive">
							<apex:repeat value="{!displayAllObjectTypes}" var="list">
								<apex:repeat value="{!list}" var="o">
									<option value="{!o.value}">{!o.label}</option>
								</apex:repeat>
							</apex:repeat>
						</select>
						<apex:inputHidden id="objectTypeSelectorHiddenNewPredictive" value="{!newObjectTypeMapping.seismic__Object_Name__c}" />
						<script>
                            var objectName = '{!$Component.objectTypeSelectorHiddenNewPredictive}';
                            function getCurrentObjectName() {
                                var input = document.getElementById(objectName);
                                return input && input.value;
                            }
                            
                            jQuery(function(){
                                var $objectTypeSelctor = jQuery("#objectTypeSelectorNewPredictive");
                                $objectTypeSelctor.children("option").each(function(k, v){
                                    if(jQuery(v).val() == $objectTypeSelctor.attr("val")){
                                        jQuery(v).attr("selected", "selected");
                                    }
                                });
                                
                                document.getElementById('{!$Component.objectTypeSelectorHiddenNewPredictive}').value = jQuery("#objectTypeSelectorNewPredictive").val();
                                
                                jQuery("#objectTypeSelectorNewPredictive").change(function(){
                                    document.getElementById('{!$Component.objectTypeSelectorHiddenNewPredictive}').value = jQuery(this).val();
                                });
                            });
                            
                        </script>
					</apex:outputpanel>
				</apex:pageBlockSectionItem>

				<apex:pageblocksectionitem rendered="{!isEditNewPredictiveMapping}">
					<apex:outputLabel value="Embedded Application"
						for="newEmbeddedApplicationName" />
					<apex:outputpanel layout="block" styleClass="requiredInput">
						<apex:outputpanel layout="block"  styleClass="requiredBlock"/>
						<apex:inputfield value="{!newObjectTypeMapping.seismic__Embedded_Application__c}"
							id="newEmbeddedApplicationName" />
					</apex:outputpanel>
				</apex:pageblocksectionitem>
				
				<apex:pageblocksectionitem rendered="{!isEditNewPredictiveMapping}">
					<apex:outputLabel value="Hide Application Header" for="newHideHeader" />
					<apex:outputpanel layout="block">
		                <apex:inputCheckbox id="newHideHeader" label="" value="{!newObjectTypeMapping.seismic__Hide_Header__c}"  title=""></apex:inputCheckbox>
					</apex:outputpanel>
				</apex:pageblocksectionitem>
				
				<apex:pageblocksectionitem rendered="{!isEditNewPredictiveMapping}">
					<apex:outputLabel value="Open Content Inline" for="newOpenContentInline" />
					<apex:outputpanel layout="block">
		                <apex:inputCheckbox id="newOpenContentInline" label="" value="{!newObjectTypeMapping.seismic__Open_Content_Inline__c}"  title=""></apex:inputCheckbox>
					</apex:outputpanel>
				</apex:pageblocksectionitem>

			</apex:pageBlockSection>
		</apex:pageBlock>
	</apex:form>

</apex:page>