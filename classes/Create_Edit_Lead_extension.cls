/*************************************************************
*Name : Create_Edit_Lead_extension
*Created By : Subhrajyoti
*Purpose : Validate the address of Lead.
****************************************************************/

public with sharing class Create_Edit_Lead_extension {

public Lead lead;
private Boolean skipCheckDuplicateAccount;
public Boolean notvalidadd{get;set;}
//public Boolean onetimeerror=false;
public Boolean addressCorrection; 
public Lead leadAddress;
public string Recordtype{get;set;}
public boolean isTestMode{get;set;}
// To retain the old version of field values
private string oldAddress1value;
private string oldAddress2value;
private string oldCityvalue;
private string oldstatevalue;
private string oldcontryvalue;
private string oldZipvalue;
private string oldphonevalue;
public string newlead;
public Map<string,recordtype> MapRecordType = new Map<string,recordtype>();
//Added by Abinaya
/*public string leadPhone;
public boolean addChange;
public boolean changesinaddressfield;
public boolean addressDuplicationCheck; 
public boolean phoneDuplicationCheck;
public boolean updateDeDup;
public list<DMND_Duplicate__c> DMND_Duplicate = new list<DMND_Duplicate__c>();
public list<DMND_Duplicate__c> duplicaterecDetail = new list<DMND_Duplicate__c>(); 
*/
//--End

// Case Number: 00247565
  public List<SelectOption> getStatus_custom () {
       List<SelectOption> options = new List<SelectOption>();
       DescribeFieldResult fieldResult = Schema.Lead.Status.getDescribe();    
       List<Schema.PicklistEntry> ple = fieldResult.getPicklistValues();
       for(Schema.PicklistEntry f : ple){
            if(f.getValue() != 'Converted'){
               options.add(new SelectOption(f.getLabel(), f.getValue()));
            }
        } 
        return options;   
    }



public Create_Edit_Lead_extension(ApexPages.StandardController stdcontroller) {

this.lead = (Lead)stdController.getRecord();
list<Recordtype> Leadrt = [SELECT id,name FROM recordtype where SobjectType = 'Lead'];//name = 'Lead (Canada)' and 
for(recordtype rt : Leadrt)
MapRecordType.put(rt.name,rt);

Recordtype=MapRecordType.get('Lead (Canada)').name;

/*if (userinfo.getOrganizationName().toUpperCase() == 'GRAND & TOY'){
lead.recordtypeid=MapRecordType.get('Lead (Canada)').id;
}
else{
lead.recordtypeid=MapRecordType.get('Lead (US)').id;
}*/
//isTestMode = false;

//Added by Abinaya
/* changesinaddressfield = false;
addChange = true;
updateDeDup = false;
phoneDuplicationCheck = false;
addressDuplicationCheck = false;*/
////---------END------------

}

public Boolean validateAddress()
{
try{
G1AddressValidation.G1AddressValidationService_pt av = new G1AddressValidation.G1AddressValidationService_pt ();
G1AddressValidation.CustomerResponseType result= new G1AddressValidation.CustomerResponseType(); 

//New change for the Security
av.inputHttpHeaders_x = new Map<String, String>();
String myData = 'sfdcuser:sfdcuser123'; 

String encodedusernameandpassword = EncodingUtil.base64Encode(Blob.valueOf(myData));
av.inputHttpHeaders_x.put('Authorization', 'Basic '+ encodedusernameandpassword);

//End New change for the Security

G1AddressValidation.CustomerType ct = new G1AddressValidation.CustomerType();
G1AddressValidation.AddressType oAddress = new G1AddressValidation.AddressType();

oAddress.StreetNameOne = lead.address1__c;
oAddress.StreetNameTwo = ''; 
oAddress.PostOfficeBox = '';
oAddress.CityName = lead.City__c;
oAddress.StateName = lead.state__c;
oAddress.ZipCode = lead.zip__c;
oAddress.Province ='';
oAddress.Country=lead.country__c;
oAddress.GeographicalCodeOne=0;
oAddress.GeographicalCodeTwo=0;
oAddress.CountyName='';
oAddress.Urbanization='';
oAddress.DeliveryPointCode='';
oAddress.ResidentialDeliveryIndicator='';

ct.ClientName = 'G';
ct.ApplicationName = 'AM';
ct.BusinessName = lead.name;
ct.ValidateAddress = 'Y';
ct.DetailGeographicalCode = 'N';
ct.IfMultipleOriginReturnOrigin = 'N';
ct.AddressValidated = 'N';
ct.AddressOverriden = 'N';
ct.MiscellaneousDataCleanup = 'Y';
ct.Address = oAddress;
System.debug('>>>>>>>>>>>>>>>>>>>>ALL GOOD');
result= av.process(ct);
System.debug('result**'+result);


lead.zip__c = result.Address.ZipCode;
lead.address1__c = result.Address.StreetNameOne ;
lead.City__c = result.Address.CityName;
lead.state__c = result.Address.StateName ;
lead.Country__c = result.Address.Country;
//lead.name= result.BusinessName;

notvalidadd=false;
String adrRc = string.valueof(result.AddressReturnCode);
String adrErrMsg = result.ErrorMessage.AddressErrorMessage;//AddressValidationReturnCode;//AddressErrorMessage;


lead.Address_Validation_Error__c = adrErrMsg ;
lead.Address_Validated__c = true;
// If address is not valid, display error message which is generated by websrvice
if(!adrRc.equals('0') )
{
system.debug('adrErrMsg: ' +adrErrMsg ) ;
ApexPages.addMessage(new ApexPages.Message(ApexPages.severity.ERROR,'INVALID ADDRESS--'+adrErrMsg));
lead.Address_Validated__c = false;
//account.Address_Validated__c = false;
notvalidadd=true;
}else{
lead.Address_Validation_Error__c = null ;
lead.Address_Validated__c = true;
}
system.debug('The variable-->'+notvalidadd);
// system.debug('After : ' +name + street1 + city +state + zip + country ) ;
return notvalidadd;
}catch(Exception ex){
ApexPages.addMessage(new ApexPages.Message(ApexPages.severity.ERROR,'INVALID ADDRESS'));
return true;
} 
}
//-------------Added by Abinaya
/*public boolean duCheck(){
if(lead.Potential_DeDuplicate__c){
duplicaterecDetail = [select Name,Disposition__c from DMND_Duplicate__c where Lead__c=:ApexPages.currentPage().getParameters().get('id')];
for(DMND_Duplicate__c DMND : duplicaterecDetail){
if((DMND.Disposition__c=='Delete' || DMND.Disposition__c=='Merge')&&(DMND.Name.contains('Address'))){
addressDuplicationCheck = true;
}
if((DMND.Disposition__c=='Delete' || DMND.Disposition__c=='Merge')&&(DMND.Name.contains('Phone'))){
phoneDuplicationCheck = true;
} 
}
if(addressDuplicationCheck ){
if(changesinaddressfield ){
ApexPages.addMessage(new ApexPages.Message(ApexPages.severity.WARNING,'This record has been marked for delete/merge. Do you wish to continue?'));
updateDeDup = true;
return false;
}
}
if(phoneDuplicationCheck ){ 
leadPhone = [select id,lead.phone from lead where id =:ApexPages.currentPage().getParameters().get('id')].phone; 
if(leadPhone!=null){
if(leadPhone!=lead.phone){
if((oldphonevalue!=lead.phone)){
ApexPages.addMessage(new ApexPages.Message(ApexPages.severity.WARNING,'This record has been marked for delete/merge. Do you wish to continue?'));
oldphonevalue= lead.phone;
updateDeDup = true;
return false;
}
}
}
} 
}
return true; 
} */ 
//-----------------End-------------------
public PageReference SaveAllData()
{ 
newlead=ApexPages.currentPage().getParameters().get('save_new');
System.debug('&&&&&&&&&&&&&&&&&'+newlead);
if(lead.country__c!=null && lead.address1__c!=null && lead.City__c!=null && lead.state__c!=null && lead.zip__c!=null)
{ //(lead.country__c).trim() =='USA';
if(newlead=='1')
{ 
if((oldAddress1value!=(lead.address1__c).trim())||(oldCityvalue != (lead.City__c).trim())||(oldstatevalue != (lead.state__c).trim())||(oldcontryvalue != (lead.country__c).trim())||(oldZipvalue != (lead.zip__c).trim())||(oldAddress2value != lead.address2__c))
{
system.debug('>>'+lead.recordtypeid+'=='+MapRecordType.get('Lead (Canada)').id+'<<');
if(lead.recordtypeid!=MapRecordType.get('Lead (Canada)').id)
{
if(validateAddress())
{ 
//retaining old version of field value to compare
oldAddress1value = (lead.address1__c).trim();
oldAddress2value = lead.address2__c;
oldCityvalue = (lead.City__c).trim();
oldstatevalue = (lead.state__c).trim();
oldcontryvalue = (lead.country__c).trim();
oldZipvalue = (lead.zip__c).trim();
return null;

}
}
} 
}
else
{

String leadId=ApexPages.currentPage().getParameters().get('id');
if (leadId !=null && leadId !=''){
system.debug('>>'+lead.recordtypeid+'=='+MapRecordType.get('Lead (Canada)').id+'<<');
if(lead.recordtypeid!=MapRecordType.get('Lead (Canada)').id)
{
leadAddress = [select id, Name,address1__c,Address_Validation_Error__c,Address_Validated__c,address2__c,City__c,state__c,country__c,zip__c from Lead where id =:ApexPages.currentPage().getParameters().get('id')];
if((leadAddress.address1__c!=lead.address1__c)||(leadAddress.address2__c !=lead.address2__c)||(leadAddress.City__c != lead.City__c)||(leadAddress.state__c != lead.state__c)||(leadAddress.country__c!=lead.country__c)||(leadAddress.zip__c!=lead.zip__c))
{
if((oldAddress1value!=(lead.address1__c).trim())||(oldCityvalue != (lead.City__c).trim())||(oldstatevalue != (lead.state__c).trim())||(oldcontryvalue != (lead.country__c).trim())||(oldZipvalue != (lead.zip__c).trim())||(oldAddress2value != lead.address2__c))
{ 
if(validateAddress())
{ 
//retaining old version of field value to compare
oldAddress1value = (lead.address1__c).trim();
oldAddress2value = lead.address2__c;
oldCityvalue = (lead.City__c).trim();
oldstatevalue = (lead.state__c).trim();
oldcontryvalue = (lead.country__c).trim();
oldZipvalue = (lead.zip__c).trim();
return null;

} 
}
}
else
{ 
lead.Address_Validation_Error__c = leadAddress.Address_Validation_Error__c;
lead.Address_Validated__c = leadAddress.Address_Validated__c;
} 
}
} 
}
}
try{
upsert lead;
return new PageReference('/'+ lead.Id);

}catch(Exception ex){
//ApexPages.addMessage(new ApexPages.Message(ApexPages.severity.ERROR,ex.getMessage()));
return null;
} 

} 

}